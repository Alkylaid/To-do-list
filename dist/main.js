(()=>{"use strict";var t={426:(t,r,n)=>{n.d(r,{Z:()=>c});var e=n(537),a=n.n(e),o=n(645),i=n.n(o)()(a());i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap);"]),i.push([t.id,":root{\r\n    --primary-dark: #353F55;\r\n    --primary-light: #F9F9FA;\r\n    --secondary-dark: #CD4258;\r\n    font-family: 'Roboto', sans-serif;\r\n    color: var(--primary-light);\r\n}\r\n\r\nbutton, input {\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n\r\n\r\nbody {\r\n    margin: 0 auto;\r\n    background-color: var(--primary-dark);\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n#container{\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: minmax(200px, 15%) 85%;\r\n    grid-template-rows: auto 1fr auto;\r\n\r\n}\r\n\r\n#header{\r\n    height: 5vh;\r\n    background-color: var(--secondary-dark);\r\n    grid-column: 1/3;\r\n    grid-row: 1/2;\r\n}\r\n\r\n#nav-menu{\r\n    height: 95vh;\r\n    background-color: var(--primary-dark);\r\n    margin-top: 50px;\r\n    grid-column: 1/2;\r\n    grid-row: 2/3;\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n    align-items: center;\r\n    gap: 40px;\r\n\r\n}\r\n\r\n#projects{\r\n    display: flex;\r\n    flex-flow: column ;\r\n    gap: 5px;\r\n    width: 75%;\r\n    height: 10vh;\r\n    align-items: flex-start;\r\n    \r\n}\r\n\r\n#default{\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 80%;\r\n    font-size: 1.4rem;\r\n\r\n}\r\n\r\n.default-button-container{\r\n    display: flex;\r\n    align-items: center;\r\n    column-gap: 10px;\r\n    padding-left: 10px;\r\n}\r\n\r\n.default-button-container:hover,#inbox-button:hover, #today-button:hover, #weekly-button:hover{\r\n    background-color: var(--secondary-dark);\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n\r\n}\r\n\r\n\r\n.nav.button{\r\n    height: 50px;\r\n    font-family: 'Roboto', sans-serif;\r\n    font-size: 1.2rem;\r\n    background: none;\r\n    color: var(--primary-light);\r\n    border: none;\r\n    padding: 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#add-new-project-container:hover, #add-new-project:hover, .fa-bold.fa-plus:hover{\r\n    color: var(--secondary-dark);\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n\r\n.nav-menu-title{\r\n    font-size: 1.4rem;\r\n    padding: 0;\r\n    margin: 0;\r\n    font-weight: 500;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n#add-new-project-container{\r\n    display: flex;\r\n    align-items: center;\r\n    column-gap: 10px;\r\n    height: 30px;\r\n}\r\n\r\n.fa-bold.fa-plus{\r\n    font-size: 1.6em;\r\n}\r\n\r\n#add-new-project{\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n\r\n#new-project-form{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n \r\n}\r\n\r\n#project-name-input, #project-name-input:active{\r\n    font-family: 'Roboto', sans-serif;\r\n    border-radius: 5px;\r\n    background-color: var(--primary-light);\r\n    color: var(--primary-dark);\r\n    border: none;\r\n    padding: 5px;\r\n    outline: none;\r\n    box-shadow: 0 0 0 20px var(--primary-light) inset;\r\n}\r\n\r\n#project-name-input::placeholder{\r\n    color:#c9c9c9;\r\n}\r\n\r\n\r\n\r\n\r\n#form-btn-container{\r\n    margin-left: auto;\r\n}\r\n\r\n#footer{\r\n\r\n    background-color: var(--secondary-dark);\r\n    grid-column: 1/3;\r\n    grid-row: 3/4;\r\n}\r\n\r\n#projects-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    row-gap: 10px;\r\n}\r\n\r\n.project {\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 10px;\r\n    font-size: 1.2rem;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.project-name{\r\n    margin-right: auto;\r\n}\r\n\r\n.project-delete{\r\n    text-shadow: 2px 1px 5px var(--primary-dark);\r\n}\r\n\r\n.project-delete:hover{\r\n    transform: scale(0.90);\r\n}\r\n\r\n\r\n.project:hover{\r\n    background-color: var(--secondary-dark);\r\n    border-radius: 5px;\r\n}\r\n\r\nform .button{\r\n    height: 25px;\r\n    background-color: var(--secondary-dark);\r\n    margin-top: 5px;\r\n    margin-left: 5px;\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    border: none;\r\n    color: var(--primary-light);\r\n    font-family: 'Roboto', sans-serif;\r\n    border-radius: 3px;\r\n}\r\n\r\nform .button:hover{\r\n    background-color: #b73c4f;\r\n    box-shadow: 0px 0px 3px var(--secondary-dark);\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n#content{\r\n    z-index: 1;\r\n    grid-column: 2/3;\r\n    background-color: var(--primary-light) ;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    padding-top: 50px;\r\n}\r\n\r\n#add-task-btn{\r\n    width: 50%;\r\n    height: 50px;\r\n    margin-top: 20px;\r\n    border-radius: 10px;\r\n    border: 1px solid #CF9BA1;\r\n    background-color: var(--primary-light);\r\n    transition: 0.3s;\r\n    font-size: 2rem;\r\n    color: var(--secondary-dark);\r\n    box-shadow: 1px 1px 3px var(--primary-dark);\r\n    text-shadow: 2px 1px var(--primary-dark);\r\n}\r\n\r\n#add-task-btn:hover, #add-task-btn.fa-bold.fa-plus:hover{\r\n    transform: scale(0.99);\r\n    cursor: pointer;\r\n   \r\n}\r\n\r\n#add-task-btn:active, #add-task-btn.fa-bold.fa-plus:active{\r\n    transform: scale(0.97);\r\n    cursor: pointer;\r\n}\r\n\r\n#task-form{\r\nmargin-top: 20px;\r\ndisplay: grid;\r\ngrid-template-columns: 100px auto 100px auto;\r\ngrid-template-rows: 30px 30px 80px;\r\nalign-items: center;\r\nwidth: 600px;\r\nheight: 130px;\r\nborder: 1px solid #CF9BA1;\r\npadding: 10px;\r\nborder-radius: 5px;\r\ncolor: var(--primary-dark);\r\nbox-shadow: 0px 0px 5px var(--primary-dark);\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n#task-name-field{\r\n    width: 200px;\r\n    height: 20px;\r\n\r\n}\r\n\r\n#date-input-field{\r\n    width: 100px;\r\n    height: 20px;\r\n}\r\n\r\n#description-input-field{\r\n    width: 200px;\r\n    height:20px;\r\n\r\n}\r\n\r\n.priority-box {\r\n    height: 1rem;\r\n    width: 1rem;\r\n    border: 1px solid black;\r\n    background-color: green;\r\n    cursor: pointer;\r\n    border-radius: 2px;\r\n}\r\n\r\n#priority-text{\r\n    margin-left: 10px;\r\n}\r\n\r\n#task-form-button-container{\r\n    grid-column: 2 / 4 ;\r\n    justify-self: center;\r\n\r\n}\r\n\r\n#task-form-button-container button{\r\n    height: 50px;\r\n    width: 100px;\r\n    margin: 10px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n    box-shadow: 0px 0px 5px var(--primary-dark);\r\n    \r\n}\r\n\r\n\r\n\r\n#task-cancel-button{\r\n    background-color: #CF9BA1;\r\n}\r\n\r\n#task-cancel-button:hover{\r\n    background-color: #d26572;\r\n}\r\n\r\n#task-add-button{\r\n    background-color: #abedd2;\r\n    \r\n}\r\n\r\n#task-add-button:hover{\r\n    background-color: #71efbb;\r\n}\r\n\r\n#task-list{\r\n    width: 50%;\r\n    color: var(--primary-dark);\r\n    display: flex;\r\n    align-items: center;\r\n    flex-flow: column;\r\n}\r\n\r\n.task-item{\r\n    display: grid;\r\n    width: 100%;\r\n    grid-template-columns: repeat(5, auto);\r\n    height: 50px;\r\n    border: 1px solid black;\r\n    margin-bottom: 10px;\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n    align-items: center;\r\n\r\n    column-gap: 20px;\r\n    border-radius: 10px;\r\n    \r\n}\r\n\r\n.task-item:hover{\r\n    background-color: var(--secondary-dark);\r\n    cursor: pointer;\r\n    color: var(--primary-light);\r\n    box-shadow: 0px 0px 5px var(--primary-dark);\r\n}\r\n\r\n.task-item .fa-circle, .task-item .fa-circle-check{\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.task-item .fa-circle:hover, .task-item .fa-circle-check:hover{\r\n    cursor: pointer;\r\n}\r\n\r\n.task-item div{\r\n\r\n    display: flex;\r\n    column-gap: 10px;\r\n    align-items: center;\r\n    justify-self: center;\r\n   \r\n}\r\n\r\n\r\n\r\n.task-item p{\r\n    justify-self: start;\r\n}\r\n\r\n.task-item .fa-trash-can{\r\n    justify-self: end;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.fa-trash-can:hover{\r\n    justify-self: end;\r\n    font-size: 1.2rem;\r\n    text-shadow: 0px 0px 5px var(--primary-light);\r\n    cursor: pointer;\r\n}\r\n\r\n.default-button-container.active, .project.active{\r\n    border-radius: 5px;\r\n    background-color: var(--secondary-dark);\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\r\n:root{\r\n    --primary-dark: #353F55;\r\n    --primary-light: #F9F9FA;\r\n    --secondary-dark: #CD4258;\r\n    font-family: 'Roboto', sans-serif;\r\n    color: var(--primary-light);\r\n}\r\n\r\nbutton, input {\r\n    font-family: 'Roboto', sans-serif;\r\n}\r\n\r\n\r\n\r\nbody {\r\n    margin: 0 auto;\r\n    background-color: var(--primary-dark);\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n#container{\r\n    width: 100%;\r\n    height: 100%;\r\n    display: grid;\r\n    grid-template-columns: minmax(200px, 15%) 85%;\r\n    grid-template-rows: auto 1fr auto;\r\n\r\n}\r\n\r\n#header{\r\n    height: 5vh;\r\n    background-color: var(--secondary-dark);\r\n    grid-column: 1/3;\r\n    grid-row: 1/2;\r\n}\r\n\r\n#nav-menu{\r\n    height: 95vh;\r\n    background-color: var(--primary-dark);\r\n    margin-top: 50px;\r\n    grid-column: 1/2;\r\n    grid-row: 2/3;\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n    align-items: center;\r\n    gap: 40px;\r\n\r\n}\r\n\r\n#projects{\r\n    display: flex;\r\n    flex-flow: column ;\r\n    gap: 5px;\r\n    width: 75%;\r\n    height: 10vh;\r\n    align-items: flex-start;\r\n    \r\n}\r\n\r\n#default{\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 80%;\r\n    font-size: 1.4rem;\r\n\r\n}\r\n\r\n.default-button-container{\r\n    display: flex;\r\n    align-items: center;\r\n    column-gap: 10px;\r\n    padding-left: 10px;\r\n}\r\n\r\n.default-button-container:hover,#inbox-button:hover, #today-button:hover, #weekly-button:hover{\r\n    background-color: var(--secondary-dark);\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n\r\n}\r\n\r\n\r\n.nav.button{\r\n    height: 50px;\r\n    font-family: 'Roboto', sans-serif;\r\n    font-size: 1.2rem;\r\n    background: none;\r\n    color: var(--primary-light);\r\n    border: none;\r\n    padding: 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#add-new-project-container:hover, #add-new-project:hover, .fa-bold.fa-plus:hover{\r\n    color: var(--secondary-dark);\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n\r\n.nav-menu-title{\r\n    font-size: 1.4rem;\r\n    padding: 0;\r\n    margin: 0;\r\n    font-weight: 500;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n#add-new-project-container{\r\n    display: flex;\r\n    align-items: center;\r\n    column-gap: 10px;\r\n    height: 30px;\r\n}\r\n\r\n.fa-bold.fa-plus{\r\n    font-size: 1.6em;\r\n}\r\n\r\n#add-new-project{\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n\r\n#new-project-form{\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n \r\n}\r\n\r\n#project-name-input, #project-name-input:active{\r\n    font-family: 'Roboto', sans-serif;\r\n    border-radius: 5px;\r\n    background-color: var(--primary-light);\r\n    color: var(--primary-dark);\r\n    border: none;\r\n    padding: 5px;\r\n    outline: none;\r\n    box-shadow: 0 0 0 20px var(--primary-light) inset;\r\n}\r\n\r\n#project-name-input::placeholder{\r\n    color:#c9c9c9;\r\n}\r\n\r\n\r\n\r\n\r\n#form-btn-container{\r\n    margin-left: auto;\r\n}\r\n\r\n#footer{\r\n\r\n    background-color: var(--secondary-dark);\r\n    grid-column: 1/3;\r\n    grid-row: 3/4;\r\n}\r\n\r\n#projects-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    row-gap: 10px;\r\n}\r\n\r\n.project {\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 10px;\r\n    font-size: 1.2rem;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.project-name{\r\n    margin-right: auto;\r\n}\r\n\r\n.project-delete{\r\n    text-shadow: 2px 1px 5px var(--primary-dark);\r\n}\r\n\r\n.project-delete:hover{\r\n    transform: scale(0.90);\r\n}\r\n\r\n\r\n.project:hover{\r\n    background-color: var(--secondary-dark);\r\n    border-radius: 5px;\r\n}\r\n\r\nform .button{\r\n    height: 25px;\r\n    background-color: var(--secondary-dark);\r\n    margin-top: 5px;\r\n    margin-left: 5px;\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    border: none;\r\n    color: var(--primary-light);\r\n    font-family: 'Roboto', sans-serif;\r\n    border-radius: 3px;\r\n}\r\n\r\nform .button:hover{\r\n    background-color: #b73c4f;\r\n    box-shadow: 0px 0px 3px var(--secondary-dark);\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n#content{\r\n    z-index: 1;\r\n    grid-column: 2/3;\r\n    background-color: var(--primary-light) ;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    padding-top: 50px;\r\n}\r\n\r\n#add-task-btn{\r\n    width: 50%;\r\n    height: 50px;\r\n    margin-top: 20px;\r\n    border-radius: 10px;\r\n    border: 1px solid #CF9BA1;\r\n    background-color: var(--primary-light);\r\n    transition: 0.3s;\r\n    font-size: 2rem;\r\n    color: var(--secondary-dark);\r\n    box-shadow: 1px 1px 3px var(--primary-dark);\r\n    text-shadow: 2px 1px var(--primary-dark);\r\n}\r\n\r\n#add-task-btn:hover, #add-task-btn.fa-bold.fa-plus:hover{\r\n    transform: scale(0.99);\r\n    cursor: pointer;\r\n   \r\n}\r\n\r\n#add-task-btn:active, #add-task-btn.fa-bold.fa-plus:active{\r\n    transform: scale(0.97);\r\n    cursor: pointer;\r\n}\r\n\r\n#task-form{\r\nmargin-top: 20px;\r\ndisplay: grid;\r\ngrid-template-columns: 100px auto 100px auto;\r\ngrid-template-rows: 30px 30px 80px;\r\nalign-items: center;\r\nwidth: 600px;\r\nheight: 130px;\r\nborder: 1px solid #CF9BA1;\r\npadding: 10px;\r\nborder-radius: 5px;\r\ncolor: var(--primary-dark);\r\nbox-shadow: 0px 0px 5px var(--primary-dark);\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n#task-name-field{\r\n    width: 200px;\r\n    height: 20px;\r\n\r\n}\r\n\r\n#date-input-field{\r\n    width: 100px;\r\n    height: 20px;\r\n}\r\n\r\n#description-input-field{\r\n    width: 200px;\r\n    height:20px;\r\n\r\n}\r\n\r\n.priority-box {\r\n    height: 1rem;\r\n    width: 1rem;\r\n    border: 1px solid black;\r\n    background-color: green;\r\n    cursor: pointer;\r\n    border-radius: 2px;\r\n}\r\n\r\n#priority-text{\r\n    margin-left: 10px;\r\n}\r\n\r\n#task-form-button-container{\r\n    grid-column: 2 / 4 ;\r\n    justify-self: center;\r\n\r\n}\r\n\r\n#task-form-button-container button{\r\n    height: 50px;\r\n    width: 100px;\r\n    margin: 10px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n    box-shadow: 0px 0px 5px var(--primary-dark);\r\n    \r\n}\r\n\r\n\r\n\r\n#task-cancel-button{\r\n    background-color: #CF9BA1;\r\n}\r\n\r\n#task-cancel-button:hover{\r\n    background-color: #d26572;\r\n}\r\n\r\n#task-add-button{\r\n    background-color: #abedd2;\r\n    \r\n}\r\n\r\n#task-add-button:hover{\r\n    background-color: #71efbb;\r\n}\r\n\r\n#task-list{\r\n    width: 50%;\r\n    color: var(--primary-dark);\r\n    display: flex;\r\n    align-items: center;\r\n    flex-flow: column;\r\n}\r\n\r\n.task-item{\r\n    display: grid;\r\n    width: 100%;\r\n    grid-template-columns: repeat(5, auto);\r\n    height: 50px;\r\n    border: 1px solid black;\r\n    margin-bottom: 10px;\r\n    padding-left: 20px;\r\n    padding-right: 20px;\r\n    align-items: center;\r\n\r\n    column-gap: 20px;\r\n    border-radius: 10px;\r\n    \r\n}\r\n\r\n.task-item:hover{\r\n    background-color: var(--secondary-dark);\r\n    cursor: pointer;\r\n    color: var(--primary-light);\r\n    box-shadow: 0px 0px 5px var(--primary-dark);\r\n}\r\n\r\n.task-item .fa-circle, .task-item .fa-circle-check{\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.task-item .fa-circle:hover, .task-item .fa-circle-check:hover{\r\n    cursor: pointer;\r\n}\r\n\r\n.task-item div{\r\n\r\n    display: flex;\r\n    column-gap: 10px;\r\n    align-items: center;\r\n    justify-self: center;\r\n   \r\n}\r\n\r\n\r\n\r\n.task-item p{\r\n    justify-self: start;\r\n}\r\n\r\n.task-item .fa-trash-can{\r\n    justify-self: end;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.fa-trash-can:hover{\r\n    justify-self: end;\r\n    font-size: 1.2rem;\r\n    text-shadow: 0px 0px 5px var(--primary-light);\r\n    cursor: pointer;\r\n}\r\n\r\n.default-button-container.active, .project.active{\r\n    border-radius: 5px;\r\n    background-color: var(--secondary-dark);\r\n}"],sourceRoot:""}]);const c=i},645:t=>{t.exports=function(t){var r=[];return r.toString=function(){return this.map((function(r){var n="",e=void 0!==r[5];return r[4]&&(n+="@supports (".concat(r[4],") {")),r[2]&&(n+="@media ".concat(r[2]," {")),e&&(n+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),n+=t(r),e&&(n+="}"),r[2]&&(n+="}"),r[4]&&(n+="}"),n})).join("")},r.i=function(t,n,e,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(e)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var u=0;u<t.length;u++){var d=[].concat(t[u]);e&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),r.push(d))}},r}},537:t=>{t.exports=function(t){var r=t[1],n=t[3];if(!n)return r;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),o="/*# ".concat(a," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[r].concat(i).concat([o]).join("\n")}return[r].join("\n")}},379:t=>{var r=[];function n(t){for(var n=-1,e=0;e<r.length;e++)if(r[e].identifier===t){n=e;break}return n}function e(t,e){for(var o={},i=[],c=0;c<t.length;c++){var s=t[c],u=e.base?s[0]+e.base:s[0],d=o[u]||0,l="".concat(u," ").concat(d);o[u]=d+1;var A=n(l),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)r[A].references++,r[A].updater(m);else{var f=a(m,e);e.byIndex=c,r.splice(c,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function a(t,r){var n=r.domAPI(r);return n.update(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap&&r.supports===t.supports&&r.layer===t.layer)return;n.update(t=r)}else n.remove()}}t.exports=function(t,a){var o=e(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var c=n(o[i]);r[c].references--}for(var s=e(t,a),u=0;u<o.length;u++){var d=n(o[u]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}o=s}}},569:t=>{var r={};t.exports=function(t,n){var e=function(t){if(void 0===r[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}r[t]=n}return r[t]}(t);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}},216:t=>{t.exports=function(t){var r=document.createElement("style");return t.setAttributes(r,t.attributes),t.insert(r,t.options),r}},565:(t,r,n)=>{t.exports=function(t){var r=n.nc;r&&t.setAttribute("nonce",r)}},795:t=>{t.exports=function(t){var r=t.insertStyleElement(t);return{update:function(n){!function(t,r,n){var e="";n.supports&&(e+="@supports (".concat(n.supports,") {")),n.media&&(e+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(e+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),e+=n.css,a&&(e+="}"),n.media&&(e+="}"),n.supports&&(e+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleTagTransform(e,t,r.options)}(r,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)}}}},589:t=>{t.exports=function(t,r){if(r.styleSheet)r.styleSheet.cssText=t;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}}}},r={};function n(e){var a=r[e];if(void 0!==a)return a.exports;var o=r[e]={id:e,exports:{}};return t[e](o,o.exports,n),o.exports}n.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return n.d(r,{a:r}),r},n.d=(t,r)=>{for(var e in r)n.o(r,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:r[e]})},n.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),n.nc=void 0,(()=>{var t=n(379),r=n.n(t),e=n(795),a=n.n(e),o=n(569),i=n.n(o),c=n(565),s=n.n(c),u=n(216),d=n.n(u),l=n(589),A=n.n(l),m=n(426),f={};function p(t,r){if(r.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+r.length+" present")}function h(t){return p(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function g(t){p(1,arguments);var r=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===r?new Date(t.getTime()):"number"==typeof t||"[object Number]"===r?new Date(t):("string"!=typeof t&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function b(t){if(p(1,arguments),!h(t)&&"number"!=typeof t)return!1;var r=g(t);return!isNaN(Number(r))}f.styleTagTransform=A(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=d(),r()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var w={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function C(t){return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.width?String(r.width):t.defaultWidth,e=t.formats[n]||t.formats[t.defaultWidth];return e}}const y={date:C({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:C({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:C({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var v={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function x(t){return function(r,n){var e,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,i=a.width?String(a.width):o;e=t.formattingValues[i]||t.formattingValues[o]}else{var c=t.defaultWidth,s=a.width?String(a.width):t.defaultWidth;e=t.values[s]||t.values[c]}return e[t.argumentCallback?t.argumentCallback(r):r]}}const B={ordinalNumber:function(t,r){var n=Number(t),e=n%100;if(e>20||e<10)switch(e%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:x({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:x({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:x({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:x({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:x({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function k(t){return function(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.width,a=e&&t.matchPatterns[e]||t.matchPatterns[t.defaultMatchWidth],o=r.match(a);if(!o)return null;var i,c=o[0],s=e&&t.parsePatterns[e]||t.parsePatterns[t.defaultParseWidth],u=Array.isArray(s)?T(s,(function(t){return t.test(c)})):I(s,(function(t){return t.test(c)}));i=t.valueCallback?t.valueCallback(u):u,i=n.valueCallback?n.valueCallback(i):i;var d=r.slice(c.length);return{value:i,rest:d}}}function I(t,r){for(var n in t)if(t.hasOwnProperty(n)&&r(t[n]))return n}function T(t,r){for(var n=0;n<t.length;n++)if(r(t[n]))return n}var E,D={ordinalNumber:(E={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(E.matchPattern);if(!n)return null;var e=n[0],a=t.match(E.parsePattern);if(!a)return null;var o=E.valueCallback?E.valueCallback(a[0]):a[0];o=r.valueCallback?r.valueCallback(o):o;var i=t.slice(e.length);return{value:o,rest:i}}),era:k({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:k({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:k({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:k({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:k({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const M={code:"en-US",formatDistance:function(t,r,n){var e,a=w[t];return e="string"==typeof a?a:1===r?a.one:a.other.replace("{{count}}",r.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+e:e+" ago":e},formatLong:y,formatRelative:function(t,r,n,e){return v[t]},localize:B,match:D,options:{weekStartsOn:0,firstWeekContainsDate:1}};function U(t){if(null===t||!0===t||!1===t)return NaN;var r=Number(t);return isNaN(r)?r:r<0?Math.ceil(r):Math.floor(r)}function Y(t,r){p(2,arguments);var n=g(t).getTime(),e=U(r);return new Date(n+e)}function j(t,r){p(2,arguments);var n=U(r);return Y(t,-n)}var L=864e5;function P(t){p(1,arguments);var r=1,n=g(t),e=n.getUTCDay(),a=(e<r?7:0)+e-r;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function S(t){p(1,arguments);var r=g(t),n=r.getUTCFullYear(),e=new Date(0);e.setUTCFullYear(n+1,0,4),e.setUTCHours(0,0,0,0);var a=P(e),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=P(o);return r.getTime()>=a.getTime()?n+1:r.getTime()>=i.getTime()?n:n-1}function q(t){p(1,arguments);var r=S(t),n=new Date(0);n.setUTCFullYear(r,0,4),n.setUTCHours(0,0,0,0);var e=P(n);return e}var H=6048e5;function N(t){p(1,arguments);var r=g(t),n=P(r).getTime()-q(r).getTime();return Math.round(n/H)+1}function W(t,r){p(1,arguments);var n=r||{},e=n.locale,a=e&&e.options&&e.options.weekStartsOn,o=null==a?0:U(a),i=null==n.weekStartsOn?o:U(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=g(t),s=c.getUTCDay(),u=(s<i?7:0)+s-i;return c.setUTCDate(c.getUTCDate()-u),c.setUTCHours(0,0,0,0),c}function R(t,r){p(1,arguments);var n=g(t),e=n.getUTCFullYear(),a=r||{},o=a.locale,i=o&&o.options&&o.options.firstWeekContainsDate,c=null==i?1:U(i),s=null==a.firstWeekContainsDate?c:U(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(e+1,0,s),u.setUTCHours(0,0,0,0);var d=W(u,r),l=new Date(0);l.setUTCFullYear(e,0,s),l.setUTCHours(0,0,0,0);var A=W(l,r);return n.getTime()>=d.getTime()?e+1:n.getTime()>=A.getTime()?e:e-1}function O(t,r){p(1,arguments);var n=r||{},e=n.locale,a=e&&e.options&&e.options.firstWeekContainsDate,o=null==a?1:U(a),i=null==n.firstWeekContainsDate?o:U(n.firstWeekContainsDate),c=R(t,r),s=new Date(0);s.setUTCFullYear(c,0,i),s.setUTCHours(0,0,0,0);var u=W(s,r);return u}var F=6048e5;function z(t,r){p(1,arguments);var n=g(t),e=W(n,r).getTime()-O(n,r).getTime();return Math.round(e/F)+1}function Q(t,r){for(var n=t<0?"-":"",e=Math.abs(t).toString();e.length<r;)e="0"+e;return n+e}const X=function(t,r){var n=t.getUTCFullYear(),e=n>0?n:1-n;return Q("yy"===r?e%100:e,r.length)},G=function(t,r){var n=t.getUTCMonth();return"M"===r?String(n+1):Q(n+1,2)},Z=function(t,r){return Q(t.getUTCDate(),r.length)},K=function(t,r){return Q(t.getUTCHours()%12||12,r.length)},$=function(t,r){return Q(t.getUTCHours(),r.length)},J=function(t,r){return Q(t.getUTCMinutes(),r.length)},V=function(t,r){return Q(t.getUTCSeconds(),r.length)},_=function(t,r){var n=r.length,e=t.getUTCMilliseconds();return Q(Math.floor(e*Math.pow(10,n-3)),r.length)};var tt={G:function(t,r,n){var e=t.getUTCFullYear()>0?1:0;switch(r){case"G":case"GG":case"GGG":return n.era(e,{width:"abbreviated"});case"GGGGG":return n.era(e,{width:"narrow"});default:return n.era(e,{width:"wide"})}},y:function(t,r,n){if("yo"===r){var e=t.getUTCFullYear(),a=e>0?e:1-e;return n.ordinalNumber(a,{unit:"year"})}return X(t,r)},Y:function(t,r,n,e){var a=R(t,e),o=a>0?a:1-a;return"YY"===r?Q(o%100,2):"Yo"===r?n.ordinalNumber(o,{unit:"year"}):Q(o,r.length)},R:function(t,r){return Q(S(t),r.length)},u:function(t,r){return Q(t.getUTCFullYear(),r.length)},Q:function(t,r,n){var e=Math.ceil((t.getUTCMonth()+1)/3);switch(r){case"Q":return String(e);case"QQ":return Q(e,2);case"Qo":return n.ordinalNumber(e,{unit:"quarter"});case"QQQ":return n.quarter(e,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(e,{width:"narrow",context:"formatting"});default:return n.quarter(e,{width:"wide",context:"formatting"})}},q:function(t,r,n){var e=Math.ceil((t.getUTCMonth()+1)/3);switch(r){case"q":return String(e);case"qq":return Q(e,2);case"qo":return n.ordinalNumber(e,{unit:"quarter"});case"qqq":return n.quarter(e,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(e,{width:"narrow",context:"standalone"});default:return n.quarter(e,{width:"wide",context:"standalone"})}},M:function(t,r,n){var e=t.getUTCMonth();switch(r){case"M":case"MM":return G(t,r);case"Mo":return n.ordinalNumber(e+1,{unit:"month"});case"MMM":return n.month(e,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(e,{width:"narrow",context:"formatting"});default:return n.month(e,{width:"wide",context:"formatting"})}},L:function(t,r,n){var e=t.getUTCMonth();switch(r){case"L":return String(e+1);case"LL":return Q(e+1,2);case"Lo":return n.ordinalNumber(e+1,{unit:"month"});case"LLL":return n.month(e,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(e,{width:"narrow",context:"standalone"});default:return n.month(e,{width:"wide",context:"standalone"})}},w:function(t,r,n,e){var a=z(t,e);return"wo"===r?n.ordinalNumber(a,{unit:"week"}):Q(a,r.length)},I:function(t,r,n){var e=N(t);return"Io"===r?n.ordinalNumber(e,{unit:"week"}):Q(e,r.length)},d:function(t,r,n){return"do"===r?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):Z(t,r)},D:function(t,r,n){var e=function(t){p(1,arguments);var r=g(t),n=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var e=r.getTime(),a=n-e;return Math.floor(a/L)+1}(t);return"Do"===r?n.ordinalNumber(e,{unit:"dayOfYear"}):Q(e,r.length)},E:function(t,r,n){var e=t.getUTCDay();switch(r){case"E":case"EE":case"EEE":return n.day(e,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(e,{width:"short",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})}},e:function(t,r,n,e){var a=t.getUTCDay(),o=(a-e.weekStartsOn+8)%7||7;switch(r){case"e":return String(o);case"ee":return Q(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,r,n,e){var a=t.getUTCDay(),o=(a-e.weekStartsOn+8)%7||7;switch(r){case"c":return String(o);case"cc":return Q(o,r.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,r,n){var e=t.getUTCDay(),a=0===e?7:e;switch(r){case"i":return String(a);case"ii":return Q(a,r.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(e,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(e,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(e,{width:"short",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})}},a:function(t,r,n){var e=t.getUTCHours()/12>=1?"pm":"am";switch(r){case"a":case"aa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})}},b:function(t,r,n){var e,a=t.getUTCHours();switch(e=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",r){case"b":case"bb":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})}},B:function(t,r,n){var e,a=t.getUTCHours();switch(e=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",r){case"B":case"BB":case"BBB":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})}},h:function(t,r,n){if("ho"===r){var e=t.getUTCHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return K(t,r)},H:function(t,r,n){return"Ho"===r?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):$(t,r)},K:function(t,r,n){var e=t.getUTCHours()%12;return"Ko"===r?n.ordinalNumber(e,{unit:"hour"}):Q(e,r.length)},k:function(t,r,n){var e=t.getUTCHours();return 0===e&&(e=24),"ko"===r?n.ordinalNumber(e,{unit:"hour"}):Q(e,r.length)},m:function(t,r,n){return"mo"===r?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):J(t,r)},s:function(t,r,n){return"so"===r?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):V(t,r)},S:function(t,r){return _(t,r)},X:function(t,r,n,e){var a=(e._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(r){case"X":return nt(a);case"XXXX":case"XX":return et(a);default:return et(a,":")}},x:function(t,r,n,e){var a=(e._originalDate||t).getTimezoneOffset();switch(r){case"x":return nt(a);case"xxxx":case"xx":return et(a);default:return et(a,":")}},O:function(t,r,n,e){var a=(e._originalDate||t).getTimezoneOffset();switch(r){case"O":case"OO":case"OOO":return"GMT"+rt(a,":");default:return"GMT"+et(a,":")}},z:function(t,r,n,e){var a=(e._originalDate||t).getTimezoneOffset();switch(r){case"z":case"zz":case"zzz":return"GMT"+rt(a,":");default:return"GMT"+et(a,":")}},t:function(t,r,n,e){var a=e._originalDate||t;return Q(Math.floor(a.getTime()/1e3),r.length)},T:function(t,r,n,e){return Q((e._originalDate||t).getTime(),r.length)}};function rt(t,r){var n=t>0?"-":"+",e=Math.abs(t),a=Math.floor(e/60),o=e%60;if(0===o)return n+String(a);var i=r||"";return n+String(a)+i+Q(o,2)}function nt(t,r){return t%60==0?(t>0?"-":"+")+Q(Math.abs(t)/60,2):et(t,r)}function et(t,r){var n=r||"",e=t>0?"-":"+",a=Math.abs(t);return e+Q(Math.floor(a/60),2)+n+Q(a%60,2)}const at=tt;function ot(t,r){switch(t){case"P":return r.date({width:"short"});case"PP":return r.date({width:"medium"});case"PPP":return r.date({width:"long"});default:return r.date({width:"full"})}}function it(t,r){switch(t){case"p":return r.time({width:"short"});case"pp":return r.time({width:"medium"});case"ppp":return r.time({width:"long"});default:return r.time({width:"full"})}}const ct={p:it,P:function(t,r){var n,e=t.match(/(P+)(p+)?/)||[],a=e[1],o=e[2];if(!o)return ot(t,r);switch(a){case"P":n=r.dateTime({width:"short"});break;case"PP":n=r.dateTime({width:"medium"});break;case"PPP":n=r.dateTime({width:"long"});break;default:n=r.dateTime({width:"full"})}return n.replace("{{date}}",ot(a,r)).replace("{{time}}",it(o,r))}};function st(t){var r=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return r.setUTCFullYear(t.getFullYear()),t.getTime()-r.getTime()}var ut=["D","DD"],dt=["YY","YYYY"];function lt(t){return-1!==ut.indexOf(t)}function At(t){return-1!==dt.indexOf(t)}function mt(t,r,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(r,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(r,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(r,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(r,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var ft=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,pt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ht=/^'([^]*?)'?$/,gt=/''/g,bt=/[a-zA-Z]/;function wt(t,r,n){p(2,arguments);var e=String(r),a=n||{},o=a.locale||M,i=o.options&&o.options.firstWeekContainsDate,c=null==i?1:U(i),s=null==a.firstWeekContainsDate?c:U(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=o.options&&o.options.weekStartsOn,d=null==u?0:U(u),l=null==a.weekStartsOn?d:U(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var A=g(t);if(!b(A))throw new RangeError("Invalid time value");var m=st(A),f=j(A,m),h={firstWeekContainsDate:s,weekStartsOn:l,locale:o,_originalDate:A},w=e.match(pt).map((function(t){var r=t[0];return"p"===r||"P"===r?(0,ct[r])(t,o.formatLong,h):t})).join("").match(ft).map((function(n){if("''"===n)return"'";var e=n[0];if("'"===e)return Ct(n);var i=at[e];if(i)return!a.useAdditionalWeekYearTokens&&At(n)&&mt(n,r,t),!a.useAdditionalDayOfYearTokens&&lt(n)&&mt(n,r,t),i(f,n,o.localize,h);if(e.match(bt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return n})).join("");return w}function Ct(t){return t.match(ht)[1].replace(gt,"'")}function yt(t,r){p(2,arguments);var n=g(t),e=U(r);return isNaN(e)?new Date(NaN):e?(n.setDate(n.getDate()+e),n):n}function vt(t,r){p(2,arguments);var n=U(r),e=7*n;return yt(t,e)}function xt(t,r){p(2,arguments);var n=g(t),e=g(r),a=n.getTime()-e.getTime();return a<0?-1:a>0?1:a}function Bt(t,r){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in r=r||{})Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n]);return t}function kt(t,r,n){p(2,arguments);var e=n||{},a=e.locale,o=a&&a.options&&a.options.weekStartsOn,i=null==o?0:U(o),c=null==e.weekStartsOn?i:U(e.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=g(t),u=U(r),d=s.getUTCDay(),l=u%7,A=(l+7)%7,m=(A<c?7:0)+u-d;return s.setUTCDate(s.getUTCDate()+m),s}var It=/^(1[0-2]|0?\d)/,Tt=/^(3[0-1]|[0-2]?\d)/,Et=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Dt=/^(5[0-3]|[0-4]?\d)/,Mt=/^(2[0-3]|[0-1]?\d)/,Ut=/^(2[0-4]|[0-1]?\d)/,Yt=/^(1[0-1]|0?\d)/,jt=/^(1[0-2]|0?\d)/,Lt=/^[0-5]?\d/,Pt=/^[0-5]?\d/,St=/^\d/,qt=/^\d{1,2}/,Ht=/^\d{1,3}/,Nt=/^\d{1,4}/,Wt=/^-?\d+/,Rt=/^-?\d/,Ot=/^-?\d{1,2}/,Ft=/^-?\d{1,3}/,zt=/^-?\d{1,4}/,Qt=/^([+-])(\d{2})(\d{2})?|Z/,Xt=/^([+-])(\d{2})(\d{2})|Z/,Gt=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,Zt=/^([+-])(\d{2}):(\d{2})|Z/,Kt=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function $t(t,r,n){var e=r.match(t);if(!e)return null;var a=parseInt(e[0],10);return{value:n?n(a):a,rest:r.slice(e[0].length)}}function Jt(t,r){var n=r.match(t);return n?"Z"===n[0]?{value:0,rest:r.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:r.slice(n[0].length)}:null}function Vt(t,r){return $t(Wt,t,r)}function _t(t,r,n){switch(t){case 1:return $t(St,r,n);case 2:return $t(qt,r,n);case 3:return $t(Ht,r,n);case 4:return $t(Nt,r,n);default:return $t(new RegExp("^\\d{1,"+t+"}"),r,n)}}function tr(t,r,n){switch(t){case 1:return $t(Rt,r,n);case 2:return $t(Ot,r,n);case 3:return $t(Ft,r,n);case 4:return $t(zt,r,n);default:return $t(new RegExp("^-?\\d{1,"+t+"}"),r,n)}}function rr(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function nr(t,r){var n,e=r>0,a=e?r:1-r;if(a<=50)n=t||100;else{var o=a+50;n=t+100*Math.floor(o/100)-(t>=o%100?100:0)}return e?n:1-n}var er=[31,28,31,30,31,30,31,31,30,31,30,31],ar=[31,29,31,30,31,30,31,31,30,31,30,31];function or(t){return t%400==0||t%4==0&&t%100!=0}var ir={G:{priority:140,parse:function(t,r,n,e){switch(r){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}},set:function(t,r,n,e){return r.era=n,t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["R","u","t","T"]},y:{priority:130,parse:function(t,r,n,e){var a=function(t){return{year:t,isTwoDigitYear:"yy"===r}};switch(r){case"y":return _t(4,t,a);case"yo":return n.ordinalNumber(t,{unit:"year",valueCallback:a});default:return _t(r.length,t,a)}},validate:function(t,r,n){return r.isTwoDigitYear||r.year>0},set:function(t,r,n,e){var a=t.getUTCFullYear();if(n.isTwoDigitYear){var o=nr(n.year,a);return t.setUTCFullYear(o,0,1),t.setUTCHours(0,0,0,0),t}var i="era"in r&&1!==r.era?1-n.year:n.year;return t.setUTCFullYear(i,0,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","u","w","I","i","e","c","t","T"]},Y:{priority:130,parse:function(t,r,n,e){var a=function(t){return{year:t,isTwoDigitYear:"YY"===r}};switch(r){case"Y":return _t(4,t,a);case"Yo":return n.ordinalNumber(t,{unit:"year",valueCallback:a});default:return _t(r.length,t,a)}},validate:function(t,r,n){return r.isTwoDigitYear||r.year>0},set:function(t,r,n,e){var a=R(t,e);if(n.isTwoDigitYear){var o=nr(n.year,a);return t.setUTCFullYear(o,0,e.firstWeekContainsDate),t.setUTCHours(0,0,0,0),W(t,e)}var i="era"in r&&1!==r.era?1-n.year:n.year;return t.setUTCFullYear(i,0,e.firstWeekContainsDate),t.setUTCHours(0,0,0,0),W(t,e)},incompatibleTokens:["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:{priority:130,parse:function(t,r,n,e){return tr("R"===r?4:r.length,t)},set:function(t,r,n,e){var a=new Date(0);return a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0),P(a)},incompatibleTokens:["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:{priority:130,parse:function(t,r,n,e){return tr("u"===r?4:r.length,t)},set:function(t,r,n,e){return t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["G","y","Y","R","w","I","i","e","c","t","T"]},Q:{priority:120,parse:function(t,r,n,e){switch(r){case"Q":case"QQ":return _t(r.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}},validate:function(t,r,n){return r>=1&&r<=4},set:function(t,r,n,e){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:{priority:120,parse:function(t,r,n,e){switch(r){case"q":case"qq":return _t(r.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}},validate:function(t,r,n){return r>=1&&r<=4},set:function(t,r,n,e){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:{priority:110,parse:function(t,r,n,e){var a=function(t){return t-1};switch(r){case"M":return $t(It,t,a);case"MM":return _t(2,t,a);case"Mo":return n.ordinalNumber(t,{unit:"month",valueCallback:a});case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}},validate:function(t,r,n){return r>=0&&r<=11},set:function(t,r,n,e){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]},L:{priority:110,parse:function(t,r,n,e){var a=function(t){return t-1};switch(r){case"L":return $t(It,t,a);case"LL":return _t(2,t,a);case"Lo":return n.ordinalNumber(t,{unit:"month",valueCallback:a});case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}},validate:function(t,r,n){return r>=0&&r<=11},set:function(t,r,n,e){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:{priority:100,parse:function(t,r,n,e){switch(r){case"w":return $t(Dt,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return _t(r.length,t)}},validate:function(t,r,n){return r>=1&&r<=53},set:function(t,r,n,e){return W(function(t,r,n){p(2,arguments);var e=g(t),a=U(r),o=z(e,n)-a;return e.setUTCDate(e.getUTCDate()-7*o),e}(t,n,e),e)},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:{priority:100,parse:function(t,r,n,e){switch(r){case"I":return $t(Dt,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return _t(r.length,t)}},validate:function(t,r,n){return r>=1&&r<=53},set:function(t,r,n,e){return P(function(t,r){p(2,arguments);var n=g(t),e=U(r),a=N(n)-e;return n.setUTCDate(n.getUTCDate()-7*a),n}(t,n,e),e)},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:{priority:90,subPriority:1,parse:function(t,r,n,e){switch(r){case"d":return $t(Tt,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return _t(r.length,t)}},validate:function(t,r,n){var e=or(t.getUTCFullYear()),a=t.getUTCMonth();return e?r>=1&&r<=ar[a]:r>=1&&r<=er[a]},set:function(t,r,n,e){return t.setUTCDate(n),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:{priority:90,subPriority:1,parse:function(t,r,n,e){switch(r){case"D":case"DD":return $t(Et,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return _t(r.length,t)}},validate:function(t,r,n){return or(t.getUTCFullYear())?r>=1&&r<=366:r>=1&&r<=365},set:function(t,r,n,e){return t.setUTCMonth(0,n),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:{priority:90,parse:function(t,r,n,e){switch(r){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}},validate:function(t,r,n){return r>=0&&r<=6},set:function(t,r,n,e){return(t=kt(t,n,e)).setUTCHours(0,0,0,0),t},incompatibleTokens:["D","i","e","c","t","T"]},e:{priority:90,parse:function(t,r,n,e){var a=function(t){var r=7*Math.floor((t-1)/7);return(t+e.weekStartsOn+6)%7+r};switch(r){case"e":case"ee":return _t(r.length,t,a);case"eo":return n.ordinalNumber(t,{unit:"day",valueCallback:a});case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}},validate:function(t,r,n){return r>=0&&r<=6},set:function(t,r,n,e){return(t=kt(t,n,e)).setUTCHours(0,0,0,0),t},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:{priority:90,parse:function(t,r,n,e){var a=function(t){var r=7*Math.floor((t-1)/7);return(t+e.weekStartsOn+6)%7+r};switch(r){case"c":case"cc":return _t(r.length,t,a);case"co":return n.ordinalNumber(t,{unit:"day",valueCallback:a});case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}},validate:function(t,r,n){return r>=0&&r<=6},set:function(t,r,n,e){return(t=kt(t,n,e)).setUTCHours(0,0,0,0),t},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:{priority:90,parse:function(t,r,n,e){var a=function(t){return 0===t?7:t};switch(r){case"i":case"ii":return _t(r.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return n.day(t,{width:"abbreviated",context:"formatting",valueCallback:a})||n.day(t,{width:"short",context:"formatting",valueCallback:a})||n.day(t,{width:"narrow",context:"formatting",valueCallback:a});case"iiiii":return n.day(t,{width:"narrow",context:"formatting",valueCallback:a});case"iiiiii":return n.day(t,{width:"short",context:"formatting",valueCallback:a})||n.day(t,{width:"narrow",context:"formatting",valueCallback:a});default:return n.day(t,{width:"wide",context:"formatting",valueCallback:a})||n.day(t,{width:"abbreviated",context:"formatting",valueCallback:a})||n.day(t,{width:"short",context:"formatting",valueCallback:a})||n.day(t,{width:"narrow",context:"formatting",valueCallback:a})}},validate:function(t,r,n){return r>=1&&r<=7},set:function(t,r,n,e){return t=function(t,r){p(2,arguments);var n=U(r);n%7==0&&(n-=7);var e=1,a=g(t),o=a.getUTCDay(),i=((n%7+7)%7<e?7:0)+n-o;return a.setUTCDate(a.getUTCDate()+i),a}(t,n,e),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:{priority:80,parse:function(t,r,n,e){switch(r){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}},set:function(t,r,n,e){return t.setUTCHours(rr(n),0,0,0),t},incompatibleTokens:["b","B","H","k","t","T"]},b:{priority:80,parse:function(t,r,n,e){switch(r){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}},set:function(t,r,n,e){return t.setUTCHours(rr(n),0,0,0),t},incompatibleTokens:["a","B","H","k","t","T"]},B:{priority:80,parse:function(t,r,n,e){switch(r){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}},set:function(t,r,n,e){return t.setUTCHours(rr(n),0,0,0),t},incompatibleTokens:["a","b","t","T"]},h:{priority:70,parse:function(t,r,n,e){switch(r){case"h":return $t(jt,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return _t(r.length,t)}},validate:function(t,r,n){return r>=1&&r<=12},set:function(t,r,n,e){var a=t.getUTCHours()>=12;return a&&n<12?t.setUTCHours(n+12,0,0,0):a||12!==n?t.setUTCHours(n,0,0,0):t.setUTCHours(0,0,0,0),t},incompatibleTokens:["H","K","k","t","T"]},H:{priority:70,parse:function(t,r,n,e){switch(r){case"H":return $t(Mt,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return _t(r.length,t)}},validate:function(t,r,n){return r>=0&&r<=23},set:function(t,r,n,e){return t.setUTCHours(n,0,0,0),t},incompatibleTokens:["a","b","h","K","k","t","T"]},K:{priority:70,parse:function(t,r,n,e){switch(r){case"K":return $t(Yt,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return _t(r.length,t)}},validate:function(t,r,n){return r>=0&&r<=11},set:function(t,r,n,e){return t.getUTCHours()>=12&&n<12?t.setUTCHours(n+12,0,0,0):t.setUTCHours(n,0,0,0),t},incompatibleTokens:["h","H","k","t","T"]},k:{priority:70,parse:function(t,r,n,e){switch(r){case"k":return $t(Ut,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return _t(r.length,t)}},validate:function(t,r,n){return r>=1&&r<=24},set:function(t,r,n,e){var a=n<=24?n%24:n;return t.setUTCHours(a,0,0,0),t},incompatibleTokens:["a","b","h","H","K","t","T"]},m:{priority:60,parse:function(t,r,n,e){switch(r){case"m":return $t(Lt,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return _t(r.length,t)}},validate:function(t,r,n){return r>=0&&r<=59},set:function(t,r,n,e){return t.setUTCMinutes(n,0,0),t},incompatibleTokens:["t","T"]},s:{priority:50,parse:function(t,r,n,e){switch(r){case"s":return $t(Pt,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return _t(r.length,t)}},validate:function(t,r,n){return r>=0&&r<=59},set:function(t,r,n,e){return t.setUTCSeconds(n,0),t},incompatibleTokens:["t","T"]},S:{priority:30,parse:function(t,r,n,e){return _t(r.length,t,(function(t){return Math.floor(t*Math.pow(10,3-r.length))}))},set:function(t,r,n,e){return t.setUTCMilliseconds(n),t},incompatibleTokens:["t","T"]},X:{priority:10,parse:function(t,r,n,e){switch(r){case"X":return Jt(Qt,t);case"XX":return Jt(Xt,t);case"XXXX":return Jt(Gt,t);case"XXXXX":return Jt(Kt,t);default:return Jt(Zt,t)}},set:function(t,r,n,e){return r.timestampIsSet?t:new Date(t.getTime()-n)},incompatibleTokens:["t","T","x"]},x:{priority:10,parse:function(t,r,n,e){switch(r){case"x":return Jt(Qt,t);case"xx":return Jt(Xt,t);case"xxxx":return Jt(Gt,t);case"xxxxx":return Jt(Kt,t);default:return Jt(Zt,t)}},set:function(t,r,n,e){return r.timestampIsSet?t:new Date(t.getTime()-n)},incompatibleTokens:["t","T","X"]},t:{priority:40,parse:function(t,r,n,e){return Vt(t)},set:function(t,r,n,e){return[new Date(1e3*n),{timestampIsSet:!0}]},incompatibleTokens:"*"},T:{priority:20,parse:function(t,r,n,e){return Vt(t)},set:function(t,r,n,e){return[new Date(n),{timestampIsSet:!0}]},incompatibleTokens:"*"}};const cr=ir;var sr=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ur=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,dr=/^'([^]*?)'?$/,lr=/''/g,Ar=/\S/,mr=/[a-zA-Z]/;function fr(t,r){if(r.timestampIsSet)return t;var n=new Date(0);return n.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),n}function pr(t){return t.match(dr)[1].replace(lr,"'")}const hr=[];class gr{constructor(t,r,n,e,a,o){this.name=t,this.description=r,this.dateCreated=n,this.dueDate=e,this.priority=a,this.isCompleted=!1,this.project=o}getName(){return this.name}getDescription(){return this.description}getDateCreated(){return this.dateCreated}getDueDate(){return this.dueDate}getPriority(){return this.priority}setPriority(t){this.priority=t}setCompletion(t){this.isCompleted=t}getCompletion(){return this.isCompleted}getProject(){return this.project}}const br=document.getElementById("content");let wr=0;function Cr(){if(document.getElementById("add-task-btn")||function(){const t=document.createElement("button");t.setAttribute("id","add-task-btn"),t.classList.add("fa-solid"),t.classList.add("fa-plus"),t.addEventListener("click",(()=>{document.getElementById("add-task-btn").style.display="none",function(){const t=document.createElement("form");t.setAttribute("id","task-form");const r=document.createElement("label");r.innerHTML="Name:",t.appendChild(r);const n=document.createElement("input");n.setAttribute("id","task-name-field"),t.appendChild(n);const e=document.createElement("label");e.innerHTML="Due Date:",t.appendChild(e);const a=document.createElement("input");a.setAttribute("type","date"),a.setAttribute("id","date-input-field"),a.value=wt(new Date,"yyyy-MM-d"),t.appendChild(a);const o=document.createElement("label");o.innerHTML="Description:",t.appendChild(o);const i=document.createElement("input");i.setAttribute("id","description-input-field"),t.appendChild(i);const c=document.createElement("label");c.innerHTML="Priority:",t.appendChild(c);const s=document.createElement("div"),u=document.createElement("button");u.classList.add("priority-box"),u.classList.add("priority-box-form"),u.value="low",u.addEventListener("click",(t=>{t.preventDefault(),vr(u)}));const d=document.createElement("span");d.setAttribute("id","priority-text"),d.innerHTML="Low",s.appendChild(u),s.appendChild(d),t.appendChild(s),br.appendChild(t);const l=document.createElement("div");l.setAttribute("id","task-form-button-container");const A=document.createElement("button");A.setAttribute("id","task-cancel-button"),A.innerHTML="Cancel",A.addEventListener("click",(r=>{r.preventDefault(),t.remove(),yr()})),l.appendChild(A);const m=document.createElement("button");m.setAttribute("id","task-add-button"),m.innerHTML="Add",m.addEventListener("click",(r=>{r.preventDefault(),function(){const t=document.getElementById("task-name-field").value,r=new Date,n=function(t,r,n,e){p(3,arguments);var a=String(t),o=String(r),i=e||{},c=i.locale||M;if(!c.match)throw new RangeError("locale must contain match property");var s=c.options&&c.options.firstWeekContainsDate,u=null==s?1:U(s),d=null==i.firstWeekContainsDate?u:U(i.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=c.options&&c.options.weekStartsOn,A=null==l?0:U(l),m=null==i.weekStartsOn?A:U(i.weekStartsOn);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===o)return""===a?g(n):new Date(NaN);var f,h={firstWeekContainsDate:d,weekStartsOn:m,locale:c},b=[{priority:10,subPriority:-1,set:fr,index:0}],w=o.match(ur).map((function(t){var r=t[0];return"p"===r||"P"===r?(0,ct[r])(t,c.formatLong,h):t})).join("").match(sr),C=[];for(f=0;f<w.length;f++){var y=w[f];!i.useAdditionalWeekYearTokens&&At(y)&&mt(y,o,t),!i.useAdditionalDayOfYearTokens&&lt(y)&&mt(y,o,t);var v=y[0],x=cr[v];if(x){var B=x.incompatibleTokens;if(Array.isArray(B)){for(var k=void 0,I=0;I<C.length;I++){var T=C[I].token;if(-1!==B.indexOf(T)||T===v){k=C[I];break}}if(k)throw new RangeError("The format string mustn't contain `".concat(k.fullToken,"` and `").concat(y,"` at the same time"))}else if("*"===x.incompatibleTokens&&C.length)throw new RangeError("The format string mustn't contain `".concat(y,"` and any other token at the same time"));C.push({token:v,fullToken:y});var E=x.parse(a,y,c.match,h);if(!E)return new Date(NaN);b.push({priority:x.priority,subPriority:x.subPriority||0,set:x.set,validate:x.validate,value:E.value,index:b.length}),a=E.rest}else{if(v.match(mr))throw new RangeError("Format string contains an unescaped latin alphabet character `"+v+"`");if("''"===y?y="'":"'"===v&&(y=pr(y)),0!==a.indexOf(y))return new Date(NaN);a=a.slice(y.length)}}if(a.length>0&&Ar.test(a))return new Date(NaN);var D=b.map((function(t){return t.priority})).sort((function(t,r){return r-t})).filter((function(t,r,n){return n.indexOf(t)===r})).map((function(t){return b.filter((function(r){return r.priority===t})).sort((function(t,r){return r.subPriority-t.subPriority}))})).map((function(t){return t[0]})),Y=g(n);if(isNaN(Y))return new Date(NaN);var L=j(Y,st(Y)),P={};for(f=0;f<D.length;f++){var S=D[f];if(S.validate&&!S.validate(L,S.value,h))return new Date(NaN);var q=S.set(L,P,S.value,h);q[0]?(L=q[0],Bt(P,q[1])):L=q}return L}(document.getElementById("date-input-field").value,"yyyy-MM-d",new Date);!function(t,r,n,e,a,o){hr.push(new gr(t,r,n,e,a,o))}(t,document.getElementById("description-input-field").value,r,n,document.querySelector(".priority-box-form").value,document.querySelector(".active").value)}(),t.remove(),yr(),Cr()})),l.appendChild(m),t.appendChild(l)}()})),br.appendChild(t)}(),document.getElementById("task-list")&&document.getElementById("task-list").remove(),0!==hr.length){const t=document.createElement("div");t.setAttribute("id","task-list"),br.prepend(t),document.querySelectorAll(".active").forEach((t=>{if(t===document.getElementById("today-container"))!function(){for(let t=0;t<hr.length;t++)wt(hr[t].getDueDate(),"MM/dd/yyyy")===wt(new Date,"MM/dd/yyyy")&&xr(t)}();else if(t===document.getElementById("weekly-container"))!function(){for(let t=0;t<hr.length;t++){const r=vt(new Date,1),n=xt(hr[t].getDueDate(),r);-1!==n&&0!==n||xr(t)}}();else if(t===document.getElementById("inbox-container"))for(let t=0;t<hr.length;t++)xr(t);else!function(){const t=document.querySelector(".active").value;for(let r=0;r<hr.length;r++)hr[r].getProject()===t&&xr(r)}()}))}}function yr(){document.getElementById("add-task-btn").style.display=""}function vr(t){const r=t,n=document.getElementById("priority-text");"low"===r.value?(r.style.background="yellow",r.value="med",n&&(n.innerHTML="Med")):"med"===r.value?(r.style.background="red",r.value="high",n&&(n.innerHTML="High")):"high"===r.value&&(r.style.background="green",r.value="low",n&&(n.innerHTML="Low"))}function xr(t){const r=document.getElementById("task-list"),n=document.createElement("div");n.classList.add("task-item");const e=document.createElement("span");e.classList.add("fa-regular"),e.classList.add("fa-circle"),e.setAttribute("id",`completion-circle-${t}`),e.addEventListener("click",(()=>{!function(t){const r=document.getElementById(`completion-circle-${t}`);hr[t].getCompletion()?hr[t].getCompletion()&&(r.classList.remove("fa-circle-check"),r.classList.add("fa-circle"),hr[t].setCompletion(!1)):(r.classList.remove("fa-circle"),r.classList.add("fa-circle-check"),hr[t].setCompletion(!0))}(t)})),n.appendChild(e);const a=document.createElement("p");a.innerHTML=hr[t].getName(),n.appendChild(a);const o=document.createElement("p");o.innerHTML=`Due Date: ${wt(hr[t].getDueDate(),"MM/dd/yyyy")}`,n.appendChild(o);const i=document.createElement("div"),c=document.createElement("p");c.innerHTML="Priority: ";const s=document.createElement("button");s.value=hr[t].getPriority(),s.setAttribute("id",`priority-box-${t}`),s.classList.add("priority-box"),"low"===hr[t].getPriority()?s.style.background="green":"med"===hr[t].getPriority()?s.style.background="yellow":"high"===hr[t].getPriority()&&(s.style.background="red"),s.addEventListener("click",(()=>{vr(s),hr[t].setPriority(s.value)})),i.appendChild(c),i.appendChild(s),n.appendChild(i);const u=document.createElement("span");u.classList.add("fa-regular"),u.classList.add("fa-trash-can"),u.addEventListener("click",(()=>{!function(t){(function(t){hr.splice(t,1)})(t),Cr()}(t)})),n.appendChild(u),r.appendChild(n)}const Br=[];function kr(){const t=document.getElementById("projects"),r=document.getElementById("new-project-form");t.removeChild(r),document.getElementById("add-new-project-container").style.display=""}function Ir(){const t=document.getElementById("projects-container");t&&t.remove();const r=document.getElementById("projects"),n=document.createElement("div");n.setAttribute("id","projects-container"),r.appendChild(n);for(let t=0;t<Br.length;t++){const r=document.createElement("div");r.classList.add("project");const e=document.createElement("span");e.classList.add("fa-solid"),e.classList.add("fa-list-check"),r.appendChild(e),r.value=Br[t];const a=document.createElement("div");a.classList.add("project-name"),a.setAttribute("id",`project-[${t}]`),a.innerHTML=`${Br[t]}`,a.addEventListener("click",(()=>{Er(),r.classList.add("active"),Cr()})),r.appendChild(a);const o=document.createElement("span");o.classList.add("project-delete"),o.classList.add("fa-regular"),o.classList.add("fa-circle-xmark"),o.addEventListener("click",(()=>Tr(t))),r.appendChild(o),n.append(r)}}function Tr(t){Br.splice(t,1),document.getElementById(`project-[${t}]`).remove(),Ir()}function Er(){document.querySelectorAll(".active").forEach((t=>{t.classList.remove("active")}))}document.getElementById("inbox-button").addEventListener("click",(()=>{Er(),document.getElementById("inbox-container").classList.add("active"),Cr()})),document.getElementById("today-button").addEventListener("click",(()=>{Er(),document.getElementById("today-container").classList.add("active"),Cr()})),document.getElementById("weekly-button").addEventListener("click",(()=>{Er(),document.getElementById("weekly-container").classList.add("active"),Cr()})),document.getElementById("add-new-project-container").addEventListener("click",(function(){document.createElement("div").setAttribute("id","new-project-container"),document.getElementById("add-new-project-container").style.display="none";const t=document.createElement("p");t.classList.add("title"),t.setAttribute("id","new-project-title"),t.textContent="Create New Project";const r=document.createElement("form");r.setAttribute("id","new-project-form");const n=document.createElement("input");n.setAttribute("id","project-name-input"),n.setAttribute("maxlength","25"),n.setAttribute("placeholder","Enter a project name");const e=document.createElement("div");e.setAttribute("id","form-btn-container");const a=document.createElement("button");a.classList.add("button"),a.setAttribute("id","new-project-submit-btn"),a.textContent="Add",a.addEventListener("click",(t=>{t.preventDefault(),function(){const t=document.getElementById("project-name-input");Br.includes(t.value)?alert("Cannot have duplicate project names"):(Br.push(t.value),kr(),Ir())}()}));const o=document.createElement("button");o.setAttribute("id","new-project-cancel-button"),o.classList.add("button"),o.innerHTML="Cancel",o.addEventListener("click",(t=>{t.preventDefault(),kr()})),r.append(n),e.append(o),e.append(a),r.append(e),document.getElementById("add-projects-title").after(r)})),wr=0,Cr()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,