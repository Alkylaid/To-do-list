(()=>{"use strict";var t={426:(t,e,r)=>{r.d(e,{Z:()=>c});var n=r(537),a=r.n(n),i=r(645),o=r.n(i)()(a());o.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap);"]),o.push([t.id,":root {\r\n  --primary-dark: #353f55;\r\n  --primary-light: #f9f9fa;\r\n  --secondary-dark: #cd4258;\r\n  font-family: 'Roboto', sans-serif;\r\n  color: var(--primary-light);\r\n}\r\n\r\nbutton,\r\ninput {\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody {\r\n  margin: 0 auto;\r\n  background-color: var(--primary-dark);\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: grid;\r\n  grid-template-columns: minmax(200px, 15%) 85%;\r\n  grid-template-rows: auto 1fr auto;\r\n}\r\n\r\n#header {\r\n  height: 5vh;\r\n  background-color: var(--secondary-dark);\r\n  grid-column: 1/3;\r\n  grid-row: 1/2;\r\n}\r\n\r\n#nav-menu {\r\n  height: 95vh;\r\n  background-color: var(--primary-dark);\r\n  margin-top: 50px;\r\n  grid-column: 1/2;\r\n  grid-row: 2/3;\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  align-items: center;\r\n  gap: 40px;\r\n}\r\n\r\n#projects {\r\n  display: flex;\r\n  flex-flow: column;\r\n  gap: 5px;\r\n  width: 75%;\r\n  height: 10vh;\r\n  align-items: flex-start;\r\n}\r\n\r\n#default {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 80%;\r\n  font-size: 1.4rem;\r\n}\r\n\r\n.default-button-container {\r\n  display: flex;\r\n  align-items: center;\r\n  column-gap: 10px;\r\n  padding-left: 10px;\r\n}\r\n\r\n.default-button-container:hover,\r\n#inbox-button:hover,\r\n#today-button:hover,\r\n#weekly-button:hover {\r\n  background-color: var(--secondary-dark);\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.nav.button {\r\n  height: 50px;\r\n  font-family: 'Roboto', sans-serif;\r\n  font-size: 1.2rem;\r\n  background: none;\r\n  color: var(--primary-light);\r\n  border: none;\r\n  padding: 0;\r\n}\r\n\r\n#add-new-project-container:hover,\r\n#add-new-project:hover,\r\n.fa-bold.fa-plus:hover {\r\n  color: var(--secondary-dark);\r\n  transition: 0.2s;\r\n  cursor: pointer;\r\n}\r\n\r\n.nav-menu-title {\r\n  font-size: 1.4rem;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-weight: 500;\r\n}\r\n\r\n#add-new-project-container {\r\n  display: flex;\r\n  align-items: center;\r\n  column-gap: 10px;\r\n  height: 30px;\r\n}\r\n\r\n.fa-bold.fa-plus {\r\n  font-size: 1.6em;\r\n}\r\n\r\n#add-new-project {\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n#new-project-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n}\r\n\r\n#project-name-input,\r\n#project-name-input:active {\r\n  font-family: 'Roboto', sans-serif;\r\n  border-radius: 5px;\r\n  background-color: var(--primary-light);\r\n  color: var(--primary-dark);\r\n  border: none;\r\n  padding: 5px;\r\n  outline: none;\r\n  box-shadow: 0 0 0 20px var(--primary-light) inset;\r\n}\r\n\r\n#project-name-input::placeholder {\r\n  color: #c9c9c9;\r\n}\r\n\r\n#form-btn-container {\r\n  margin-left: auto;\r\n}\r\n\r\n#footer {\r\n  background-color: var(--secondary-dark);\r\n  grid-column: 1/3;\r\n  grid-row: 3/4;\r\n}\r\n\r\n#projects-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  row-gap: 10px;\r\n}\r\n\r\n.project {\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  font-size: 1.2rem;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n}\r\n\r\n.project-name {\r\n  margin-right: auto;\r\n}\r\n\r\n.project-delete {\r\n  text-shadow: 2px 1px 5px var(--primary-dark);\r\n}\r\n\r\n.project-delete:hover {\r\n  transform: scale(0.9);\r\n}\r\n\r\n.project:hover {\r\n  background-color: var(--secondary-dark);\r\n  border-radius: 5px;\r\n}\r\n\r\nform .button {\r\n  height: 25px;\r\n  background-color: var(--secondary-dark);\r\n  margin-top: 5px;\r\n  margin-left: 5px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  border: none;\r\n  color: var(--primary-light);\r\n  font-family: 'Roboto', sans-serif;\r\n  border-radius: 3px;\r\n}\r\n\r\nform .button:hover {\r\n  background-color: #b73c4f;\r\n  box-shadow: 0px 0px 3px var(--secondary-dark);\r\n  cursor: pointer;\r\n}\r\n\r\n#content {\r\n  z-index: 1;\r\n  grid-column: 2/3;\r\n  background-color: var(--primary-light);\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  padding-top: 50px;\r\n}\r\n\r\n#add-task-btn {\r\n  width: 50%;\r\n  height: 50px;\r\n  margin-top: 20px;\r\n  border-radius: 10px;\r\n  border: 1px solid #cf9ba1;\r\n  background-color: var(--primary-light);\r\n  transition: 0.3s;\r\n  font-size: 2rem;\r\n  color: var(--secondary-dark);\r\n  box-shadow: 1px 1px 3px var(--primary-dark);\r\n  text-shadow: 2px 1px var(--primary-dark);\r\n}\r\n\r\n#add-task-btn:hover,\r\n#add-task-btn.fa-bold.fa-plus:hover {\r\n  transform: scale(0.99);\r\n  cursor: pointer;\r\n}\r\n\r\n#add-task-btn:active,\r\n#add-task-btn.fa-bold.fa-plus:active {\r\n  transform: scale(0.97);\r\n  cursor: pointer;\r\n}\r\n\r\n#task-form {\r\n  margin-top: 20px;\r\n  display: grid;\r\n  grid-template-columns: 100px auto 100px auto;\r\n  grid-template-rows: auto auto auto;\r\n  align-items: center;\r\n  width: 600px;\r\n  height: 200px;\r\n  border: 1px solid #cf9ba1;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  color: var(--primary-dark);\r\n  box-shadow: 0px 0px 5px var(--primary-dark);\r\n  row-gap: 10px;\r\n}\r\n\r\n#task-name-field {\r\n  width: 200px;\r\n  height: 20px;\r\n}\r\n\r\n#date-input-field {\r\n  width: 100px;\r\n  height: 20px;\r\n}\r\n\r\n#description-input-field {\r\n  width: 200px;\r\n  height: 75px;\r\n}\r\n\r\n.priority-box {\r\n  height: 1rem;\r\n  width: 1rem;\r\n  border: 1px solid black;\r\n  background-color: green;\r\n  cursor: pointer;\r\n  border-radius: 2px;\r\n}\r\n\r\n#priority-text {\r\n  margin-left: 10px;\r\n}\r\n\r\n#task-form-button-container,\r\n#view-form-button-container {\r\n  grid-column: 2 / 4;\r\n  justify-self: center;\r\n}\r\n\r\n#task-form-button-container button,\r\n#view-form-button-container button {\r\n  height: 50px;\r\n  width: 100px;\r\n  margin: 10px;\r\n  border-radius: 5px;\r\n  border: none;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  box-shadow: 0px 0px 5px var(--primary-dark);\r\n}\r\n\r\n#task-cancel-button,\r\n#task-close-button {\r\n  background-color: #cf9ba1;\r\n}\r\n\r\n#task-cancel-button:hover,\r\n#task-close-button:hover {\r\n  background-color: #d26572;\r\n}\r\n\r\n#task-add-button,\r\n#edit-button, #save-button {\r\n  background-color: #abedd2;\r\n}\r\n\r\n#task-add-button:hover,\r\n#edit-button:hover, #save-button:hover {\r\n  background-color: #71efbb;\r\n}\r\n\r\n#task-list {\r\n  width: 50%;\r\n  color: var(--primary-dark);\r\n  display: flex;\r\n  align-items: center;\r\n  flex-flow: column;\r\n}\r\n\r\n.task-item {\r\n  display: grid;\r\n  width: 100%;\r\n  grid-template-columns: repeat(5, auto);\r\n  height: 50px;\r\n  border: 1px solid black;\r\n  margin-bottom: 10px;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  align-items: center;\r\n\r\n  column-gap: 20px;\r\n  border-radius: 10px;\r\n}\r\n\r\n.task-item:hover {\r\n  background-color: var(--secondary-dark);\r\n  cursor: pointer;\r\n  color: var(--primary-light);\r\n  box-shadow: 0px 0px 5px var(--primary-dark);\r\n}\r\n\r\n.task-item .fa-circle,\r\n.task-item .fa-circle-check {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.task-item .fa-circle:hover,\r\n.task-item .fa-circle-check:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.task-item div {\r\n  display: flex;\r\n  column-gap: 10px;\r\n  align-items: center;\r\n  justify-self: center;\r\n}\r\n\r\n.task-item p {\r\n  justify-self: start;\r\n}\r\n\r\n#task-edit-container {\r\n  justify-self: end;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.fa-trash-can, .fa-pen-to-square{\r\n    justify-self: end;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.fa-trash-can:hover, .fa-pen-to-square:hover, .fa-circle:hover, .fa-circle-check:hover {\r\n\r\n  text-shadow: 0px 0px 5px var(--primary-light);\r\n  cursor: pointer;\r\n}\r\n\r\n.default-button-container.active,\r\n.project.active {\r\n  border-radius: 5px;\r\n  background-color: var(--secondary-dark);\r\n}\r\n\r\n#task-view-window {\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  display: grid;\r\n  grid-template-columns: 100px auto 100px auto;\r\n  grid-template-rows: auto auto auto;\r\n  align-items: center;\r\n  width: 600px;\r\n  height: 200px;\r\n  border: 1px solid #cf9ba1;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  color: var(--primary-dark);\r\n  box-shadow: 0px 0px 5px var(--primary-dark);\r\n  row-gap: 10px;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');\r\n:root {\r\n  --primary-dark: #353f55;\r\n  --primary-light: #f9f9fa;\r\n  --secondary-dark: #cd4258;\r\n  font-family: 'Roboto', sans-serif;\r\n  color: var(--primary-light);\r\n}\r\n\r\nbutton,\r\ninput {\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\n\r\nbody {\r\n  margin: 0 auto;\r\n  background-color: var(--primary-dark);\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n#container {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: grid;\r\n  grid-template-columns: minmax(200px, 15%) 85%;\r\n  grid-template-rows: auto 1fr auto;\r\n}\r\n\r\n#header {\r\n  height: 5vh;\r\n  background-color: var(--secondary-dark);\r\n  grid-column: 1/3;\r\n  grid-row: 1/2;\r\n}\r\n\r\n#nav-menu {\r\n  height: 95vh;\r\n  background-color: var(--primary-dark);\r\n  margin-top: 50px;\r\n  grid-column: 1/2;\r\n  grid-row: 2/3;\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n  align-items: center;\r\n  gap: 40px;\r\n}\r\n\r\n#projects {\r\n  display: flex;\r\n  flex-flow: column;\r\n  gap: 5px;\r\n  width: 75%;\r\n  height: 10vh;\r\n  align-items: flex-start;\r\n}\r\n\r\n#default {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 80%;\r\n  font-size: 1.4rem;\r\n}\r\n\r\n.default-button-container {\r\n  display: flex;\r\n  align-items: center;\r\n  column-gap: 10px;\r\n  padding-left: 10px;\r\n}\r\n\r\n.default-button-container:hover,\r\n#inbox-button:hover,\r\n#today-button:hover,\r\n#weekly-button:hover {\r\n  background-color: var(--secondary-dark);\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.nav.button {\r\n  height: 50px;\r\n  font-family: 'Roboto', sans-serif;\r\n  font-size: 1.2rem;\r\n  background: none;\r\n  color: var(--primary-light);\r\n  border: none;\r\n  padding: 0;\r\n}\r\n\r\n#add-new-project-container:hover,\r\n#add-new-project:hover,\r\n.fa-bold.fa-plus:hover {\r\n  color: var(--secondary-dark);\r\n  transition: 0.2s;\r\n  cursor: pointer;\r\n}\r\n\r\n.nav-menu-title {\r\n  font-size: 1.4rem;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-weight: 500;\r\n}\r\n\r\n#add-new-project-container {\r\n  display: flex;\r\n  align-items: center;\r\n  column-gap: 10px;\r\n  height: 30px;\r\n}\r\n\r\n.fa-bold.fa-plus {\r\n  font-size: 1.6em;\r\n}\r\n\r\n#add-new-project {\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n#new-project-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n}\r\n\r\n#project-name-input,\r\n#project-name-input:active {\r\n  font-family: 'Roboto', sans-serif;\r\n  border-radius: 5px;\r\n  background-color: var(--primary-light);\r\n  color: var(--primary-dark);\r\n  border: none;\r\n  padding: 5px;\r\n  outline: none;\r\n  box-shadow: 0 0 0 20px var(--primary-light) inset;\r\n}\r\n\r\n#project-name-input::placeholder {\r\n  color: #c9c9c9;\r\n}\r\n\r\n#form-btn-container {\r\n  margin-left: auto;\r\n}\r\n\r\n#footer {\r\n  background-color: var(--secondary-dark);\r\n  grid-column: 1/3;\r\n  grid-row: 3/4;\r\n}\r\n\r\n#projects-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  row-gap: 10px;\r\n}\r\n\r\n.project {\r\n  display: flex;\r\n  flex-direction: row;\r\n  gap: 10px;\r\n  font-size: 1.2rem;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n}\r\n\r\n.project-name {\r\n  margin-right: auto;\r\n}\r\n\r\n.project-delete {\r\n  text-shadow: 2px 1px 5px var(--primary-dark);\r\n}\r\n\r\n.project-delete:hover {\r\n  transform: scale(0.9);\r\n}\r\n\r\n.project:hover {\r\n  background-color: var(--secondary-dark);\r\n  border-radius: 5px;\r\n}\r\n\r\nform .button {\r\n  height: 25px;\r\n  background-color: var(--secondary-dark);\r\n  margin-top: 5px;\r\n  margin-left: 5px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  border: none;\r\n  color: var(--primary-light);\r\n  font-family: 'Roboto', sans-serif;\r\n  border-radius: 3px;\r\n}\r\n\r\nform .button:hover {\r\n  background-color: #b73c4f;\r\n  box-shadow: 0px 0px 3px var(--secondary-dark);\r\n  cursor: pointer;\r\n}\r\n\r\n#content {\r\n  z-index: 1;\r\n  grid-column: 2/3;\r\n  background-color: var(--primary-light);\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  padding-top: 50px;\r\n}\r\n\r\n#add-task-btn {\r\n  width: 50%;\r\n  height: 50px;\r\n  margin-top: 20px;\r\n  border-radius: 10px;\r\n  border: 1px solid #cf9ba1;\r\n  background-color: var(--primary-light);\r\n  transition: 0.3s;\r\n  font-size: 2rem;\r\n  color: var(--secondary-dark);\r\n  box-shadow: 1px 1px 3px var(--primary-dark);\r\n  text-shadow: 2px 1px var(--primary-dark);\r\n}\r\n\r\n#add-task-btn:hover,\r\n#add-task-btn.fa-bold.fa-plus:hover {\r\n  transform: scale(0.99);\r\n  cursor: pointer;\r\n}\r\n\r\n#add-task-btn:active,\r\n#add-task-btn.fa-bold.fa-plus:active {\r\n  transform: scale(0.97);\r\n  cursor: pointer;\r\n}\r\n\r\n#task-form {\r\n  margin-top: 20px;\r\n  display: grid;\r\n  grid-template-columns: 100px auto 100px auto;\r\n  grid-template-rows: auto auto auto;\r\n  align-items: center;\r\n  width: 600px;\r\n  height: 200px;\r\n  border: 1px solid #cf9ba1;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  color: var(--primary-dark);\r\n  box-shadow: 0px 0px 5px var(--primary-dark);\r\n  row-gap: 10px;\r\n}\r\n\r\n#task-name-field {\r\n  width: 200px;\r\n  height: 20px;\r\n}\r\n\r\n#date-input-field {\r\n  width: 100px;\r\n  height: 20px;\r\n}\r\n\r\n#description-input-field {\r\n  width: 200px;\r\n  height: 75px;\r\n}\r\n\r\n.priority-box {\r\n  height: 1rem;\r\n  width: 1rem;\r\n  border: 1px solid black;\r\n  background-color: green;\r\n  cursor: pointer;\r\n  border-radius: 2px;\r\n}\r\n\r\n#priority-text {\r\n  margin-left: 10px;\r\n}\r\n\r\n#task-form-button-container,\r\n#view-form-button-container {\r\n  grid-column: 2 / 4;\r\n  justify-self: center;\r\n}\r\n\r\n#task-form-button-container button,\r\n#view-form-button-container button {\r\n  height: 50px;\r\n  width: 100px;\r\n  margin: 10px;\r\n  border-radius: 5px;\r\n  border: none;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  box-shadow: 0px 0px 5px var(--primary-dark);\r\n}\r\n\r\n#task-cancel-button,\r\n#task-close-button {\r\n  background-color: #cf9ba1;\r\n}\r\n\r\n#task-cancel-button:hover,\r\n#task-close-button:hover {\r\n  background-color: #d26572;\r\n}\r\n\r\n#task-add-button,\r\n#edit-button, #save-button {\r\n  background-color: #abedd2;\r\n}\r\n\r\n#task-add-button:hover,\r\n#edit-button:hover, #save-button:hover {\r\n  background-color: #71efbb;\r\n}\r\n\r\n#task-list {\r\n  width: 50%;\r\n  color: var(--primary-dark);\r\n  display: flex;\r\n  align-items: center;\r\n  flex-flow: column;\r\n}\r\n\r\n.task-item {\r\n  display: grid;\r\n  width: 100%;\r\n  grid-template-columns: repeat(5, auto);\r\n  height: 50px;\r\n  border: 1px solid black;\r\n  margin-bottom: 10px;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  align-items: center;\r\n\r\n  column-gap: 20px;\r\n  border-radius: 10px;\r\n}\r\n\r\n.task-item:hover {\r\n  background-color: var(--secondary-dark);\r\n  cursor: pointer;\r\n  color: var(--primary-light);\r\n  box-shadow: 0px 0px 5px var(--primary-dark);\r\n}\r\n\r\n.task-item .fa-circle,\r\n.task-item .fa-circle-check {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.task-item .fa-circle:hover,\r\n.task-item .fa-circle-check:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.task-item div {\r\n  display: flex;\r\n  column-gap: 10px;\r\n  align-items: center;\r\n  justify-self: center;\r\n}\r\n\r\n.task-item p {\r\n  justify-self: start;\r\n}\r\n\r\n#task-edit-container {\r\n  justify-self: end;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.fa-trash-can, .fa-pen-to-square{\r\n    justify-self: end;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n.fa-trash-can:hover, .fa-pen-to-square:hover, .fa-circle:hover, .fa-circle-check:hover {\r\n\r\n  text-shadow: 0px 0px 5px var(--primary-light);\r\n  cursor: pointer;\r\n}\r\n\r\n.default-button-container.active,\r\n.project.active {\r\n  border-radius: 5px;\r\n  background-color: var(--secondary-dark);\r\n}\r\n\r\n#task-view-window {\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  display: grid;\r\n  grid-template-columns: 100px auto 100px auto;\r\n  grid-template-rows: auto auto auto;\r\n  align-items: center;\r\n  width: 600px;\r\n  height: 200px;\r\n  border: 1px solid #cf9ba1;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  color: var(--primary-dark);\r\n  box-shadow: 0px 0px 5px var(--primary-dark);\r\n  row-gap: 10px;\r\n}\r\n"],sourceRoot:""}]);const c=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,a,i){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(n)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(o[d]=!0)}for(var s=0;s<t.length;s++){var u=[].concat(t[s]);n&&o[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),e.push(u))}},e}},537:t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(a," */"),o=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var i={},o=[],c=0;c<t.length;c++){var d=t[c],s=n.base?d[0]+n.base:d[0],u=i[s]||0,l="".concat(s," ").concat(u);i[s]=u+1;var m=r(l),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==m)e[m].references++,e[m].updater(A);else{var p=a(A,n);n.byIndex=c,e.splice(c,0,{identifier:l,updater:p,references:1})}o.push(l)}return o}function a(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,a){var i=n(t=t||[],a=a||{});return function(t){t=t||[];for(var o=0;o<i.length;o++){var c=r(i[o]);e[c].references--}for(var d=n(t,a),s=0;s<i.length;s++){var u=r(i[s]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=d}}},569:t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,a&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function r(n){var a=e[n];if(void 0!==a)return a.exports;var i=e[n]={id:n,exports:{}};return t[n](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.nc=void 0,(()=>{var t=r(379),e=r.n(t),n=r(795),a=r.n(n),i=r(569),o=r.n(i),c=r(565),d=r.n(c),s=r(216),u=r.n(s),l=r(589),m=r.n(l),A=r(426),p={};function f(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function h(t){return f(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function g(t){f(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function b(t){if(f(1,arguments),!h(t)&&"number"!=typeof t)return!1;var e=g(t);return!isNaN(Number(e))}p.styleTagTransform=m(),p.setAttributes=d(),p.insert=o().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=u(),e()(A.Z,p),A.Z&&A.Z.locals&&A.Z.locals;var y={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function w(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.width?String(e.width):t.defaultWidth,n=t.formats[r]||t.formats[t.defaultWidth];return n}}const C={date:w({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:w({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:w({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var v={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function E(t){return function(e,r){var n,a=r||{};if("formatting"===(a.context?String(a.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,o=a.width?String(a.width):i;n=t.formattingValues[o]||t.formattingValues[i]}else{var c=t.defaultWidth,d=a.width?String(a.width):t.defaultWidth;n=t.values[d]||t.values[c]}return n[t.argumentCallback?t.argumentCallback(e):e]}}const x={ordinalNumber:function(t,e){var r=Number(t),n=r%100;if(n>20||n<10)switch(n%10){case 1:return r+"st";case 2:return r+"nd";case 3:return r+"rd"}return r+"th"},era:E({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:E({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:E({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:E({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:E({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function k(t){return function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.width,a=n&&t.matchPatterns[n]||t.matchPatterns[t.defaultMatchWidth],i=e.match(a);if(!i)return null;var o,c=i[0],d=n&&t.parsePatterns[n]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(d)?T(d,(function(t){return t.test(c)})):B(d,(function(t){return t.test(c)}));o=t.valueCallback?t.valueCallback(s):s,o=r.valueCallback?r.valueCallback(o):o;var u=e.slice(c.length);return{value:o,rest:u}}}function B(t,e){for(var r in t)if(t.hasOwnProperty(r)&&e(t[r]))return r}function T(t,e){for(var r=0;r<t.length;r++)if(e(t[r]))return r}var D,M={ordinalNumber:(D={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.match(D.matchPattern);if(!r)return null;var n=r[0],a=t.match(D.parsePattern);if(!a)return null;var i=D.valueCallback?D.valueCallback(a[0]):a[0];i=e.valueCallback?e.valueCallback(i):i;var o=t.slice(n.length);return{value:i,rest:o}}),era:k({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:k({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:k({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:k({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:k({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const U={code:"en-US",formatDistance:function(t,e,r){var n,a=y[t];return n="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=r&&r.addSuffix?r.comparison&&r.comparison>0?"in "+n:n+" ago":n},formatLong:C,formatRelative:function(t,e,r,n){return v[t]},localize:x,match:M,options:{weekStartsOn:0,firstWeekContainsDate:1}};function Y(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function L(t,e){f(2,arguments);var r=g(t).getTime(),n=Y(e);return new Date(r+n)}function j(t,e){f(2,arguments);var r=Y(e);return L(t,-r)}var N=864e5;function S(t){f(1,arguments);var e=1,r=g(t),n=r.getUTCDay(),a=(n<e?7:0)+n-e;return r.setUTCDate(r.getUTCDate()-a),r.setUTCHours(0,0,0,0),r}function P(t){f(1,arguments);var e=g(t),r=e.getUTCFullYear(),n=new Date(0);n.setUTCFullYear(r+1,0,4),n.setUTCHours(0,0,0,0);var a=S(n),i=new Date(0);i.setUTCFullYear(r,0,4),i.setUTCHours(0,0,0,0);var o=S(i);return e.getTime()>=a.getTime()?r+1:e.getTime()>=o.getTime()?r:r-1}function H(t){f(1,arguments);var e=P(t),r=new Date(0);r.setUTCFullYear(e,0,4),r.setUTCHours(0,0,0,0);var n=S(r);return n}var I=6048e5;function q(t){f(1,arguments);var e=g(t),r=S(e).getTime()-H(e).getTime();return Math.round(r/I)+1}function W(t,e){f(1,arguments);var r=e||{},n=r.locale,a=n&&n.options&&n.options.weekStartsOn,i=null==a?0:Y(a),o=null==r.weekStartsOn?i:Y(r.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=g(t),d=c.getUTCDay(),s=(d<o?7:0)+d-o;return c.setUTCDate(c.getUTCDate()-s),c.setUTCHours(0,0,0,0),c}function O(t,e){f(1,arguments);var r=g(t),n=r.getUTCFullYear(),a=e||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,c=null==o?1:Y(o),d=null==a.firstWeekContainsDate?c:Y(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var s=new Date(0);s.setUTCFullYear(n+1,0,d),s.setUTCHours(0,0,0,0);var u=W(s,e),l=new Date(0);l.setUTCFullYear(n,0,d),l.setUTCHours(0,0,0,0);var m=W(l,e);return r.getTime()>=u.getTime()?n+1:r.getTime()>=m.getTime()?n:n-1}function R(t,e){f(1,arguments);var r=e||{},n=r.locale,a=n&&n.options&&n.options.firstWeekContainsDate,i=null==a?1:Y(a),o=null==r.firstWeekContainsDate?i:Y(r.firstWeekContainsDate),c=O(t,e),d=new Date(0);d.setUTCFullYear(c,0,o),d.setUTCHours(0,0,0,0);var s=W(d,e);return s}var z=6048e5;function Q(t,e){f(1,arguments);var r=g(t),n=W(r,e).getTime()-R(r,e).getTime();return Math.round(n/z)+1}function F(t,e){for(var r=t<0?"-":"",n=Math.abs(t).toString();n.length<e;)n="0"+n;return r+n}const Z=function(t,e){var r=t.getUTCFullYear(),n=r>0?r:1-r;return F("yy"===e?n%100:n,e.length)},X=function(t,e){var r=t.getUTCMonth();return"M"===e?String(r+1):F(r+1,2)},G=function(t,e){return F(t.getUTCDate(),e.length)},$=function(t,e){return F(t.getUTCHours()%12||12,e.length)},J=function(t,e){return F(t.getUTCHours(),e.length)},K=function(t,e){return F(t.getUTCMinutes(),e.length)},V=function(t,e){return F(t.getUTCSeconds(),e.length)},_=function(t,e){var r=e.length,n=t.getUTCMilliseconds();return F(Math.floor(n*Math.pow(10,r-3)),e.length)};var tt={G:function(t,e,r){var n=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return r.era(n,{width:"abbreviated"});case"GGGGG":return r.era(n,{width:"narrow"});default:return r.era(n,{width:"wide"})}},y:function(t,e,r){if("yo"===e){var n=t.getUTCFullYear(),a=n>0?n:1-n;return r.ordinalNumber(a,{unit:"year"})}return Z(t,e)},Y:function(t,e,r,n){var a=O(t,n),i=a>0?a:1-a;return"YY"===e?F(i%100,2):"Yo"===e?r.ordinalNumber(i,{unit:"year"}):F(i,e.length)},R:function(t,e){return F(P(t),e.length)},u:function(t,e){return F(t.getUTCFullYear(),e.length)},Q:function(t,e,r){var n=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(n);case"QQ":return F(n,2);case"Qo":return r.ordinalNumber(n,{unit:"quarter"});case"QQQ":return r.quarter(n,{width:"abbreviated",context:"formatting"});case"QQQQQ":return r.quarter(n,{width:"narrow",context:"formatting"});default:return r.quarter(n,{width:"wide",context:"formatting"})}},q:function(t,e,r){var n=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(n);case"qq":return F(n,2);case"qo":return r.ordinalNumber(n,{unit:"quarter"});case"qqq":return r.quarter(n,{width:"abbreviated",context:"standalone"});case"qqqqq":return r.quarter(n,{width:"narrow",context:"standalone"});default:return r.quarter(n,{width:"wide",context:"standalone"})}},M:function(t,e,r){var n=t.getUTCMonth();switch(e){case"M":case"MM":return X(t,e);case"Mo":return r.ordinalNumber(n+1,{unit:"month"});case"MMM":return r.month(n,{width:"abbreviated",context:"formatting"});case"MMMMM":return r.month(n,{width:"narrow",context:"formatting"});default:return r.month(n,{width:"wide",context:"formatting"})}},L:function(t,e,r){var n=t.getUTCMonth();switch(e){case"L":return String(n+1);case"LL":return F(n+1,2);case"Lo":return r.ordinalNumber(n+1,{unit:"month"});case"LLL":return r.month(n,{width:"abbreviated",context:"standalone"});case"LLLLL":return r.month(n,{width:"narrow",context:"standalone"});default:return r.month(n,{width:"wide",context:"standalone"})}},w:function(t,e,r,n){var a=Q(t,n);return"wo"===e?r.ordinalNumber(a,{unit:"week"}):F(a,e.length)},I:function(t,e,r){var n=q(t);return"Io"===e?r.ordinalNumber(n,{unit:"week"}):F(n,e.length)},d:function(t,e,r){return"do"===e?r.ordinalNumber(t.getUTCDate(),{unit:"date"}):G(t,e)},D:function(t,e,r){var n=function(t){f(1,arguments);var e=g(t),r=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var n=e.getTime(),a=r-n;return Math.floor(a/N)+1}(t);return"Do"===e?r.ordinalNumber(n,{unit:"dayOfYear"}):F(n,e.length)},E:function(t,e,r){var n=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return r.day(n,{width:"abbreviated",context:"formatting"});case"EEEEE":return r.day(n,{width:"narrow",context:"formatting"});case"EEEEEE":return r.day(n,{width:"short",context:"formatting"});default:return r.day(n,{width:"wide",context:"formatting"})}},e:function(t,e,r,n){var a=t.getUTCDay(),i=(a-n.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return F(i,2);case"eo":return r.ordinalNumber(i,{unit:"day"});case"eee":return r.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return r.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return r.day(a,{width:"short",context:"formatting"});default:return r.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,r,n){var a=t.getUTCDay(),i=(a-n.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return F(i,e.length);case"co":return r.ordinalNumber(i,{unit:"day"});case"ccc":return r.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return r.day(a,{width:"narrow",context:"standalone"});case"cccccc":return r.day(a,{width:"short",context:"standalone"});default:return r.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,r){var n=t.getUTCDay(),a=0===n?7:n;switch(e){case"i":return String(a);case"ii":return F(a,e.length);case"io":return r.ordinalNumber(a,{unit:"day"});case"iii":return r.day(n,{width:"abbreviated",context:"formatting"});case"iiiii":return r.day(n,{width:"narrow",context:"formatting"});case"iiiiii":return r.day(n,{width:"short",context:"formatting"});default:return r.day(n,{width:"wide",context:"formatting"})}},a:function(t,e,r){var n=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"aaa":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return r.dayPeriod(n,{width:"narrow",context:"formatting"});default:return r.dayPeriod(n,{width:"wide",context:"formatting"})}},b:function(t,e,r){var n,a=t.getUTCHours();switch(n=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"bbb":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return r.dayPeriod(n,{width:"narrow",context:"formatting"});default:return r.dayPeriod(n,{width:"wide",context:"formatting"})}},B:function(t,e,r){var n,a=t.getUTCHours();switch(n=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"BBBBB":return r.dayPeriod(n,{width:"narrow",context:"formatting"});default:return r.dayPeriod(n,{width:"wide",context:"formatting"})}},h:function(t,e,r){if("ho"===e){var n=t.getUTCHours()%12;return 0===n&&(n=12),r.ordinalNumber(n,{unit:"hour"})}return $(t,e)},H:function(t,e,r){return"Ho"===e?r.ordinalNumber(t.getUTCHours(),{unit:"hour"}):J(t,e)},K:function(t,e,r){var n=t.getUTCHours()%12;return"Ko"===e?r.ordinalNumber(n,{unit:"hour"}):F(n,e.length)},k:function(t,e,r){var n=t.getUTCHours();return 0===n&&(n=24),"ko"===e?r.ordinalNumber(n,{unit:"hour"}):F(n,e.length)},m:function(t,e,r){return"mo"===e?r.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):K(t,e)},s:function(t,e,r){return"so"===e?r.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):V(t,e)},S:function(t,e){return _(t,e)},X:function(t,e,r,n){var a=(n._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return rt(a);case"XXXX":case"XX":return nt(a);default:return nt(a,":")}},x:function(t,e,r,n){var a=(n._originalDate||t).getTimezoneOffset();switch(e){case"x":return rt(a);case"xxxx":case"xx":return nt(a);default:return nt(a,":")}},O:function(t,e,r,n){var a=(n._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+et(a,":");default:return"GMT"+nt(a,":")}},z:function(t,e,r,n){var a=(n._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+et(a,":");default:return"GMT"+nt(a,":")}},t:function(t,e,r,n){var a=n._originalDate||t;return F(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,r,n){return F((n._originalDate||t).getTime(),e.length)}};function et(t,e){var r=t>0?"-":"+",n=Math.abs(t),a=Math.floor(n/60),i=n%60;if(0===i)return r+String(a);var o=e||"";return r+String(a)+o+F(i,2)}function rt(t,e){return t%60==0?(t>0?"-":"+")+F(Math.abs(t)/60,2):nt(t,e)}function nt(t,e){var r=e||"",n=t>0?"-":"+",a=Math.abs(t);return n+F(Math.floor(a/60),2)+r+F(a%60,2)}const at=tt;function it(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function ot(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}const ct={p:ot,P:function(t,e){var r,n=t.match(/(P+)(p+)?/)||[],a=n[1],i=n[2];if(!i)return it(t,e);switch(a){case"P":r=e.dateTime({width:"short"});break;case"PP":r=e.dateTime({width:"medium"});break;case"PPP":r=e.dateTime({width:"long"});break;default:r=e.dateTime({width:"full"})}return r.replace("{{date}}",it(a,e)).replace("{{time}}",ot(i,e))}};function dt(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var st=["D","DD"],ut=["YY","YYYY"];function lt(t){return-1!==st.indexOf(t)}function mt(t){return-1!==ut.indexOf(t)}function At(t,e,r){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(r,"`; see: https://git.io/fxCyr"))}var pt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ft=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ht=/^'([^]*?)'?$/,gt=/''/g,bt=/[a-zA-Z]/;function yt(t,e,r){f(2,arguments);var n=String(e),a=r||{},i=a.locale||U,o=i.options&&i.options.firstWeekContainsDate,c=null==o?1:Y(o),d=null==a.firstWeekContainsDate?c:Y(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var s=i.options&&i.options.weekStartsOn,u=null==s?0:Y(s),l=null==a.weekStartsOn?u:Y(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var m=g(t);if(!b(m))throw new RangeError("Invalid time value");var A=dt(m),p=j(m,A),h={firstWeekContainsDate:d,weekStartsOn:l,locale:i,_originalDate:m},y=n.match(ft).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,ct[e])(t,i.formatLong,h):t})).join("").match(pt).map((function(r){if("''"===r)return"'";var n=r[0];if("'"===n)return wt(r);var o=at[n];if(o)return!a.useAdditionalWeekYearTokens&&mt(r)&&At(r,e,t),!a.useAdditionalDayOfYearTokens&&lt(r)&&At(r,e,t),o(p,r,i.localize,h);if(n.match(bt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");return r})).join("");return y}function wt(t){return t.match(ht)[1].replace(gt,"'")}function Ct(t,e){f(2,arguments);var r=g(t),n=Y(e);return isNaN(n)?new Date(NaN):n?(r.setDate(r.getDate()+n),r):r}function vt(t,e){f(2,arguments);var r=Y(e),n=7*r;return Ct(t,n)}function Et(t,e){f(2,arguments);var r=g(t),n=g(e),a=r.getTime()-n.getTime();return a<0?-1:a>0?1:a}function xt(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var r in e=e||{})Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}function kt(t,e,r){f(2,arguments);var n=r||{},a=n.locale,i=a&&a.options&&a.options.weekStartsOn,o=null==i?0:Y(i),c=null==n.weekStartsOn?o:Y(n.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=g(t),s=Y(e),u=d.getUTCDay(),l=s%7,m=(l+7)%7,A=(m<c?7:0)+s-u;return d.setUTCDate(d.getUTCDate()+A),d}var Bt=/^(1[0-2]|0?\d)/,Tt=/^(3[0-1]|[0-2]?\d)/,Dt=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Mt=/^(5[0-3]|[0-4]?\d)/,Ut=/^(2[0-3]|[0-1]?\d)/,Yt=/^(2[0-4]|[0-1]?\d)/,Lt=/^(1[0-1]|0?\d)/,jt=/^(1[0-2]|0?\d)/,Nt=/^[0-5]?\d/,St=/^[0-5]?\d/,Pt=/^\d/,Ht=/^\d{1,2}/,It=/^\d{1,3}/,qt=/^\d{1,4}/,Wt=/^-?\d+/,Ot=/^-?\d/,Rt=/^-?\d{1,2}/,zt=/^-?\d{1,3}/,Qt=/^-?\d{1,4}/,Ft=/^([+-])(\d{2})(\d{2})?|Z/,Zt=/^([+-])(\d{2})(\d{2})|Z/,Xt=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,Gt=/^([+-])(\d{2}):(\d{2})|Z/,$t=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function Jt(t,e,r){var n=e.match(t);if(!n)return null;var a=parseInt(n[0],10);return{value:r?r(a):a,rest:e.slice(n[0].length)}}function Kt(t,e){var r=e.match(t);return r?"Z"===r[0]?{value:0,rest:e.slice(1)}:{value:("+"===r[1]?1:-1)*(36e5*(r[2]?parseInt(r[2],10):0)+6e4*(r[3]?parseInt(r[3],10):0)+1e3*(r[5]?parseInt(r[5],10):0)),rest:e.slice(r[0].length)}:null}function Vt(t,e){return Jt(Wt,t,e)}function _t(t,e,r){switch(t){case 1:return Jt(Pt,e,r);case 2:return Jt(Ht,e,r);case 3:return Jt(It,e,r);case 4:return Jt(qt,e,r);default:return Jt(new RegExp("^\\d{1,"+t+"}"),e,r)}}function te(t,e,r){switch(t){case 1:return Jt(Ot,e,r);case 2:return Jt(Rt,e,r);case 3:return Jt(zt,e,r);case 4:return Jt(Qt,e,r);default:return Jt(new RegExp("^-?\\d{1,"+t+"}"),e,r)}}function ee(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function re(t,e){var r,n=e>0,a=n?e:1-e;if(a<=50)r=t||100;else{var i=a+50;r=t+100*Math.floor(i/100)-(t>=i%100?100:0)}return n?r:1-r}var ne=[31,28,31,30,31,30,31,31,30,31,30,31],ae=[31,29,31,30,31,30,31,31,30,31,30,31];function ie(t){return t%400==0||t%4==0&&t%100!=0}var oe={G:{priority:140,parse:function(t,e,r,n){switch(e){case"G":case"GG":case"GGG":return r.era(t,{width:"abbreviated"})||r.era(t,{width:"narrow"});case"GGGGG":return r.era(t,{width:"narrow"});default:return r.era(t,{width:"wide"})||r.era(t,{width:"abbreviated"})||r.era(t,{width:"narrow"})}},set:function(t,e,r,n){return e.era=r,t.setUTCFullYear(r,0,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["R","u","t","T"]},y:{priority:130,parse:function(t,e,r,n){var a=function(t){return{year:t,isTwoDigitYear:"yy"===e}};switch(e){case"y":return _t(4,t,a);case"yo":return r.ordinalNumber(t,{unit:"year",valueCallback:a});default:return _t(e.length,t,a)}},validate:function(t,e,r){return e.isTwoDigitYear||e.year>0},set:function(t,e,r,n){var a=t.getUTCFullYear();if(r.isTwoDigitYear){var i=re(r.year,a);return t.setUTCFullYear(i,0,1),t.setUTCHours(0,0,0,0),t}var o="era"in e&&1!==e.era?1-r.year:r.year;return t.setUTCFullYear(o,0,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","u","w","I","i","e","c","t","T"]},Y:{priority:130,parse:function(t,e,r,n){var a=function(t){return{year:t,isTwoDigitYear:"YY"===e}};switch(e){case"Y":return _t(4,t,a);case"Yo":return r.ordinalNumber(t,{unit:"year",valueCallback:a});default:return _t(e.length,t,a)}},validate:function(t,e,r){return e.isTwoDigitYear||e.year>0},set:function(t,e,r,n){var a=O(t,n);if(r.isTwoDigitYear){var i=re(r.year,a);return t.setUTCFullYear(i,0,n.firstWeekContainsDate),t.setUTCHours(0,0,0,0),W(t,n)}var o="era"in e&&1!==e.era?1-r.year:r.year;return t.setUTCFullYear(o,0,n.firstWeekContainsDate),t.setUTCHours(0,0,0,0),W(t,n)},incompatibleTokens:["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:{priority:130,parse:function(t,e,r,n){return te("R"===e?4:e.length,t)},set:function(t,e,r,n){var a=new Date(0);return a.setUTCFullYear(r,0,4),a.setUTCHours(0,0,0,0),S(a)},incompatibleTokens:["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:{priority:130,parse:function(t,e,r,n){return te("u"===e?4:e.length,t)},set:function(t,e,r,n){return t.setUTCFullYear(r,0,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["G","y","Y","R","w","I","i","e","c","t","T"]},Q:{priority:120,parse:function(t,e,r,n){switch(e){case"Q":case"QQ":return _t(e.length,t);case"Qo":return r.ordinalNumber(t,{unit:"quarter"});case"QQQ":return r.quarter(t,{width:"abbreviated",context:"formatting"})||r.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return r.quarter(t,{width:"narrow",context:"formatting"});default:return r.quarter(t,{width:"wide",context:"formatting"})||r.quarter(t,{width:"abbreviated",context:"formatting"})||r.quarter(t,{width:"narrow",context:"formatting"})}},validate:function(t,e,r){return e>=1&&e<=4},set:function(t,e,r,n){return t.setUTCMonth(3*(r-1),1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:{priority:120,parse:function(t,e,r,n){switch(e){case"q":case"qq":return _t(e.length,t);case"qo":return r.ordinalNumber(t,{unit:"quarter"});case"qqq":return r.quarter(t,{width:"abbreviated",context:"standalone"})||r.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return r.quarter(t,{width:"narrow",context:"standalone"});default:return r.quarter(t,{width:"wide",context:"standalone"})||r.quarter(t,{width:"abbreviated",context:"standalone"})||r.quarter(t,{width:"narrow",context:"standalone"})}},validate:function(t,e,r){return e>=1&&e<=4},set:function(t,e,r,n){return t.setUTCMonth(3*(r-1),1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:{priority:110,parse:function(t,e,r,n){var a=function(t){return t-1};switch(e){case"M":return Jt(Bt,t,a);case"MM":return _t(2,t,a);case"Mo":return r.ordinalNumber(t,{unit:"month",valueCallback:a});case"MMM":return r.month(t,{width:"abbreviated",context:"formatting"})||r.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return r.month(t,{width:"narrow",context:"formatting"});default:return r.month(t,{width:"wide",context:"formatting"})||r.month(t,{width:"abbreviated",context:"formatting"})||r.month(t,{width:"narrow",context:"formatting"})}},validate:function(t,e,r){return e>=0&&e<=11},set:function(t,e,r,n){return t.setUTCMonth(r,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]},L:{priority:110,parse:function(t,e,r,n){var a=function(t){return t-1};switch(e){case"L":return Jt(Bt,t,a);case"LL":return _t(2,t,a);case"Lo":return r.ordinalNumber(t,{unit:"month",valueCallback:a});case"LLL":return r.month(t,{width:"abbreviated",context:"standalone"})||r.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return r.month(t,{width:"narrow",context:"standalone"});default:return r.month(t,{width:"wide",context:"standalone"})||r.month(t,{width:"abbreviated",context:"standalone"})||r.month(t,{width:"narrow",context:"standalone"})}},validate:function(t,e,r){return e>=0&&e<=11},set:function(t,e,r,n){return t.setUTCMonth(r,1),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:{priority:100,parse:function(t,e,r,n){switch(e){case"w":return Jt(Mt,t);case"wo":return r.ordinalNumber(t,{unit:"week"});default:return _t(e.length,t)}},validate:function(t,e,r){return e>=1&&e<=53},set:function(t,e,r,n){return W(function(t,e,r){f(2,arguments);var n=g(t),a=Y(e),i=Q(n,r)-a;return n.setUTCDate(n.getUTCDate()-7*i),n}(t,r,n),n)},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:{priority:100,parse:function(t,e,r,n){switch(e){case"I":return Jt(Mt,t);case"Io":return r.ordinalNumber(t,{unit:"week"});default:return _t(e.length,t)}},validate:function(t,e,r){return e>=1&&e<=53},set:function(t,e,r,n){return S(function(t,e){f(2,arguments);var r=g(t),n=Y(e),a=q(r)-n;return r.setUTCDate(r.getUTCDate()-7*a),r}(t,r,n),n)},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:{priority:90,subPriority:1,parse:function(t,e,r,n){switch(e){case"d":return Jt(Tt,t);case"do":return r.ordinalNumber(t,{unit:"date"});default:return _t(e.length,t)}},validate:function(t,e,r){var n=ie(t.getUTCFullYear()),a=t.getUTCMonth();return n?e>=1&&e<=ae[a]:e>=1&&e<=ne[a]},set:function(t,e,r,n){return t.setUTCDate(r),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:{priority:90,subPriority:1,parse:function(t,e,r,n){switch(e){case"D":case"DD":return Jt(Dt,t);case"Do":return r.ordinalNumber(t,{unit:"date"});default:return _t(e.length,t)}},validate:function(t,e,r){return ie(t.getUTCFullYear())?e>=1&&e<=366:e>=1&&e<=365},set:function(t,e,r,n){return t.setUTCMonth(0,r),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:{priority:90,parse:function(t,e,r,n){switch(e){case"E":case"EE":case"EEE":return r.day(t,{width:"abbreviated",context:"formatting"})||r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return r.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"});default:return r.day(t,{width:"wide",context:"formatting"})||r.day(t,{width:"abbreviated",context:"formatting"})||r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"})}},validate:function(t,e,r){return e>=0&&e<=6},set:function(t,e,r,n){return(t=kt(t,r,n)).setUTCHours(0,0,0,0),t},incompatibleTokens:["D","i","e","c","t","T"]},e:{priority:90,parse:function(t,e,r,n){var a=function(t){var e=7*Math.floor((t-1)/7);return(t+n.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return _t(e.length,t,a);case"eo":return r.ordinalNumber(t,{unit:"day",valueCallback:a});case"eee":return r.day(t,{width:"abbreviated",context:"formatting"})||r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"});case"eeeee":return r.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"});default:return r.day(t,{width:"wide",context:"formatting"})||r.day(t,{width:"abbreviated",context:"formatting"})||r.day(t,{width:"short",context:"formatting"})||r.day(t,{width:"narrow",context:"formatting"})}},validate:function(t,e,r){return e>=0&&e<=6},set:function(t,e,r,n){return(t=kt(t,r,n)).setUTCHours(0,0,0,0),t},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:{priority:90,parse:function(t,e,r,n){var a=function(t){var e=7*Math.floor((t-1)/7);return(t+n.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return _t(e.length,t,a);case"co":return r.ordinalNumber(t,{unit:"day",valueCallback:a});case"ccc":return r.day(t,{width:"abbreviated",context:"standalone"})||r.day(t,{width:"short",context:"standalone"})||r.day(t,{width:"narrow",context:"standalone"});case"ccccc":return r.day(t,{width:"narrow",context:"standalone"});case"cccccc":return r.day(t,{width:"short",context:"standalone"})||r.day(t,{width:"narrow",context:"standalone"});default:return r.day(t,{width:"wide",context:"standalone"})||r.day(t,{width:"abbreviated",context:"standalone"})||r.day(t,{width:"short",context:"standalone"})||r.day(t,{width:"narrow",context:"standalone"})}},validate:function(t,e,r){return e>=0&&e<=6},set:function(t,e,r,n){return(t=kt(t,r,n)).setUTCHours(0,0,0,0),t},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:{priority:90,parse:function(t,e,r,n){var a=function(t){return 0===t?7:t};switch(e){case"i":case"ii":return _t(e.length,t);case"io":return r.ordinalNumber(t,{unit:"day"});case"iii":return r.day(t,{width:"abbreviated",context:"formatting",valueCallback:a})||r.day(t,{width:"short",context:"formatting",valueCallback:a})||r.day(t,{width:"narrow",context:"formatting",valueCallback:a});case"iiiii":return r.day(t,{width:"narrow",context:"formatting",valueCallback:a});case"iiiiii":return r.day(t,{width:"short",context:"formatting",valueCallback:a})||r.day(t,{width:"narrow",context:"formatting",valueCallback:a});default:return r.day(t,{width:"wide",context:"formatting",valueCallback:a})||r.day(t,{width:"abbreviated",context:"formatting",valueCallback:a})||r.day(t,{width:"short",context:"formatting",valueCallback:a})||r.day(t,{width:"narrow",context:"formatting",valueCallback:a})}},validate:function(t,e,r){return e>=1&&e<=7},set:function(t,e,r,n){return t=function(t,e){f(2,arguments);var r=Y(e);r%7==0&&(r-=7);var n=1,a=g(t),i=a.getUTCDay(),o=((r%7+7)%7<n?7:0)+r-i;return a.setUTCDate(a.getUTCDate()+o),a}(t,r,n),t.setUTCHours(0,0,0,0),t},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:{priority:80,parse:function(t,e,r,n){switch(e){case"a":case"aa":case"aaa":return r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return r.dayPeriod(t,{width:"narrow",context:"formatting"});default:return r.dayPeriod(t,{width:"wide",context:"formatting"})||r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"})}},set:function(t,e,r,n){return t.setUTCHours(ee(r),0,0,0),t},incompatibleTokens:["b","B","H","k","t","T"]},b:{priority:80,parse:function(t,e,r,n){switch(e){case"b":case"bb":case"bbb":return r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return r.dayPeriod(t,{width:"narrow",context:"formatting"});default:return r.dayPeriod(t,{width:"wide",context:"formatting"})||r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"})}},set:function(t,e,r,n){return t.setUTCHours(ee(r),0,0,0),t},incompatibleTokens:["a","B","H","k","t","T"]},B:{priority:80,parse:function(t,e,r,n){switch(e){case"B":case"BB":case"BBB":return r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return r.dayPeriod(t,{width:"narrow",context:"formatting"});default:return r.dayPeriod(t,{width:"wide",context:"formatting"})||r.dayPeriod(t,{width:"abbreviated",context:"formatting"})||r.dayPeriod(t,{width:"narrow",context:"formatting"})}},set:function(t,e,r,n){return t.setUTCHours(ee(r),0,0,0),t},incompatibleTokens:["a","b","t","T"]},h:{priority:70,parse:function(t,e,r,n){switch(e){case"h":return Jt(jt,t);case"ho":return r.ordinalNumber(t,{unit:"hour"});default:return _t(e.length,t)}},validate:function(t,e,r){return e>=1&&e<=12},set:function(t,e,r,n){var a=t.getUTCHours()>=12;return a&&r<12?t.setUTCHours(r+12,0,0,0):a||12!==r?t.setUTCHours(r,0,0,0):t.setUTCHours(0,0,0,0),t},incompatibleTokens:["H","K","k","t","T"]},H:{priority:70,parse:function(t,e,r,n){switch(e){case"H":return Jt(Ut,t);case"Ho":return r.ordinalNumber(t,{unit:"hour"});default:return _t(e.length,t)}},validate:function(t,e,r){return e>=0&&e<=23},set:function(t,e,r,n){return t.setUTCHours(r,0,0,0),t},incompatibleTokens:["a","b","h","K","k","t","T"]},K:{priority:70,parse:function(t,e,r,n){switch(e){case"K":return Jt(Lt,t);case"Ko":return r.ordinalNumber(t,{unit:"hour"});default:return _t(e.length,t)}},validate:function(t,e,r){return e>=0&&e<=11},set:function(t,e,r,n){return t.getUTCHours()>=12&&r<12?t.setUTCHours(r+12,0,0,0):t.setUTCHours(r,0,0,0),t},incompatibleTokens:["h","H","k","t","T"]},k:{priority:70,parse:function(t,e,r,n){switch(e){case"k":return Jt(Yt,t);case"ko":return r.ordinalNumber(t,{unit:"hour"});default:return _t(e.length,t)}},validate:function(t,e,r){return e>=1&&e<=24},set:function(t,e,r,n){var a=r<=24?r%24:r;return t.setUTCHours(a,0,0,0),t},incompatibleTokens:["a","b","h","H","K","t","T"]},m:{priority:60,parse:function(t,e,r,n){switch(e){case"m":return Jt(Nt,t);case"mo":return r.ordinalNumber(t,{unit:"minute"});default:return _t(e.length,t)}},validate:function(t,e,r){return e>=0&&e<=59},set:function(t,e,r,n){return t.setUTCMinutes(r,0,0),t},incompatibleTokens:["t","T"]},s:{priority:50,parse:function(t,e,r,n){switch(e){case"s":return Jt(St,t);case"so":return r.ordinalNumber(t,{unit:"second"});default:return _t(e.length,t)}},validate:function(t,e,r){return e>=0&&e<=59},set:function(t,e,r,n){return t.setUTCSeconds(r,0),t},incompatibleTokens:["t","T"]},S:{priority:30,parse:function(t,e,r,n){return _t(e.length,t,(function(t){return Math.floor(t*Math.pow(10,3-e.length))}))},set:function(t,e,r,n){return t.setUTCMilliseconds(r),t},incompatibleTokens:["t","T"]},X:{priority:10,parse:function(t,e,r,n){switch(e){case"X":return Kt(Ft,t);case"XX":return Kt(Zt,t);case"XXXX":return Kt(Xt,t);case"XXXXX":return Kt($t,t);default:return Kt(Gt,t)}},set:function(t,e,r,n){return e.timestampIsSet?t:new Date(t.getTime()-r)},incompatibleTokens:["t","T","x"]},x:{priority:10,parse:function(t,e,r,n){switch(e){case"x":return Kt(Ft,t);case"xx":return Kt(Zt,t);case"xxxx":return Kt(Xt,t);case"xxxxx":return Kt($t,t);default:return Kt(Gt,t)}},set:function(t,e,r,n){return e.timestampIsSet?t:new Date(t.getTime()-r)},incompatibleTokens:["t","T","X"]},t:{priority:40,parse:function(t,e,r,n){return Vt(t)},set:function(t,e,r,n){return[new Date(1e3*r),{timestampIsSet:!0}]},incompatibleTokens:"*"},T:{priority:20,parse:function(t,e,r,n){return Vt(t)},set:function(t,e,r,n){return[new Date(r),{timestampIsSet:!0}]},incompatibleTokens:"*"}};const ce=oe;var de=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,se=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ue=/^'([^]*?)'?$/,le=/''/g,me=/\S/,Ae=/[a-zA-Z]/;function pe(t,e,r,n){f(3,arguments);var a=String(t),i=String(e),o=n||{},c=o.locale||U;if(!c.match)throw new RangeError("locale must contain match property");var d=c.options&&c.options.firstWeekContainsDate,s=null==d?1:Y(d),u=null==o.firstWeekContainsDate?s:Y(o.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=c.options&&c.options.weekStartsOn,m=null==l?0:Y(l),A=null==o.weekStartsOn?m:Y(o.weekStartsOn);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===i)return""===a?g(r):new Date(NaN);var p,h={firstWeekContainsDate:u,weekStartsOn:A,locale:c},b=[{priority:10,subPriority:-1,set:fe,index:0}],y=i.match(se).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,ct[e])(t,c.formatLong,h):t})).join("").match(de),w=[];for(p=0;p<y.length;p++){var C=y[p];!o.useAdditionalWeekYearTokens&&mt(C)&&At(C,i,t),!o.useAdditionalDayOfYearTokens&&lt(C)&&At(C,i,t);var v=C[0],E=ce[v];if(E){var x=E.incompatibleTokens;if(Array.isArray(x)){for(var k=void 0,B=0;B<w.length;B++){var T=w[B].token;if(-1!==x.indexOf(T)||T===v){k=w[B];break}}if(k)throw new RangeError("The format string mustn't contain `".concat(k.fullToken,"` and `").concat(C,"` at the same time"))}else if("*"===E.incompatibleTokens&&w.length)throw new RangeError("The format string mustn't contain `".concat(C,"` and any other token at the same time"));w.push({token:v,fullToken:C});var D=E.parse(a,C,c.match,h);if(!D)return new Date(NaN);b.push({priority:E.priority,subPriority:E.subPriority||0,set:E.set,validate:E.validate,value:D.value,index:b.length}),a=D.rest}else{if(v.match(Ae))throw new RangeError("Format string contains an unescaped latin alphabet character `"+v+"`");if("''"===C?C="'":"'"===v&&(C=he(C)),0!==a.indexOf(C))return new Date(NaN);a=a.slice(C.length)}}if(a.length>0&&me.test(a))return new Date(NaN);var M=b.map((function(t){return t.priority})).sort((function(t,e){return e-t})).filter((function(t,e,r){return r.indexOf(t)===e})).map((function(t){return b.filter((function(e){return e.priority===t})).sort((function(t,e){return e.subPriority-t.subPriority}))})).map((function(t){return t[0]})),L=g(r);if(isNaN(L))return new Date(NaN);var N=j(L,dt(L)),S={};for(p=0;p<M.length;p++){var P=M[p];if(P.validate&&!P.validate(N,P.value,h))return new Date(NaN);var H=P.set(N,S,P.value,h);H[0]?(N=H[0],xt(S,H[1])):N=H}return N}function fe(t,e){if(e.timestampIsSet)return t;var r=new Date(0);return r.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),r.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),r}function he(t){return t.match(ue)[1].replace(le,"'")}let ge=[];class be{constructor(t,e,r,n,a){this.name=t,this.description=e,this.dueDate=r,this.priority=n,this.isCompleted=!1,this.project=a}getName(){return this.name}setName(t){this.name=t}getDescription(){return this.description}setDescription(t){this.description=t}getDueDate(){return this.dueDate}setDueDate(t){this.dueDate=t}getPriority(){return this.priority}setPriority(t){this.priority=t}setCompletion(t){this.isCompleted=t}getCompletion(){return this.isCompleted}getProject(){return this.project}}Math.pow(10,8);var ye=36e5;function we(t,e){f(1,arguments);var r=e||{},n=null==r.additionalDigits?2:Y(r.additionalDigits);if(2!==n&&1!==n&&0!==n)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var a,i=ke(t);if(i.date){var o=Be(i.date,n);a=Te(o.restDateString,o.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var c,d=a.getTime(),s=0;if(i.time&&(s=Me(i.time),isNaN(s)))return new Date(NaN);if(!i.timezone){var u=new Date(d+s),l=new Date(0);return l.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),l.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),l}return c=Ye(i.timezone),isNaN(c)?new Date(NaN):new Date(d+s+c)}var Ce={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},ve=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Ee=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,xe=/^([+-])(\d{2})(?::?(\d{2}))?$/;function ke(t){var e,r={},n=t.split(Ce.dateTimeDelimiter);if(n.length>2)return r;if(/:/.test(n[0])?e=n[0]:(r.date=n[0],e=n[1],Ce.timeZoneDelimiter.test(r.date)&&(r.date=t.split(Ce.timeZoneDelimiter)[0],e=t.substr(r.date.length,t.length))),e){var a=Ce.timezone.exec(e);a?(r.time=e.replace(a[1],""),r.timezone=a[1]):r.time=e}return r}function Be(t,e){var r=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),n=t.match(r);if(!n)return{year:NaN,restDateString:""};var a=n[1]?parseInt(n[1]):null,i=n[2]?parseInt(n[2]):null;return{year:null===i?a:100*i,restDateString:t.slice((n[1]||n[2]).length)}}function Te(t,e){if(null===e)return new Date(NaN);var r=t.match(ve);if(!r)return new Date(NaN);var n=!!r[4],a=De(r[1]),i=De(r[2])-1,o=De(r[3]),c=De(r[4]),d=De(r[5])-1;if(n)return function(t,e,r){return e>=1&&e<=53&&r>=0&&r<=6}(0,c,d)?function(t,e,r){var n=new Date(0);n.setUTCFullYear(t,0,4);var a=7*(e-1)+r+1-(n.getUTCDay()||7);return n.setUTCDate(n.getUTCDate()+a),n}(e,c,d):new Date(NaN);var s=new Date(0);return function(t,e,r){return e>=0&&e<=11&&r>=1&&r<=(Le[e]||(je(t)?29:28))}(e,i,o)&&function(t,e){return e>=1&&e<=(je(t)?366:365)}(e,a)?(s.setUTCFullYear(e,i,Math.max(a,o)),s):new Date(NaN)}function De(t){return t?parseInt(t):1}function Me(t){var e=t.match(Ee);if(!e)return NaN;var r=Ue(e[1]),n=Ue(e[2]),a=Ue(e[3]);return function(t,e,r){return 24===t?0===e&&0===r:r>=0&&r<60&&e>=0&&e<60&&t>=0&&t<25}(r,n,a)?r*ye+6e4*n+1e3*a:NaN}function Ue(t){return t&&parseFloat(t.replace(",","."))||0}function Ye(t){if("Z"===t)return 0;var e=t.match(xe);if(!e)return 0;var r="+"===e[1]?-1:1,n=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,a)?r*(n*ye+6e4*a):NaN}var Le=[31,null,31,30,31,30,31,31,30,31,30,31];function je(t){return t%400==0||t%4==0&&t%100!=0}function Ne(){localStorage.setItem("itemList",JSON.stringify(ge)),localStorage.setItem("projectList",JSON.stringify(Re))}function Se(){ge=JSON.parse(localStorage.getItem("itemList")),Re=JSON.parse(localStorage.getItem("projectList")),null===ge&&(ge=[]),null===Re&&(Re=[]);for(let t=0;t<ge.length;t++)ge[t].dueDate=we(ge[t].dueDate,"yyyy-MM-d",new Date)}const Pe=document.getElementById("content");function He(){if(Se(),document.getElementById("add-task-btn")||function(){const t=document.createElement("button");t.setAttribute("id","add-task-btn"),t.classList.add("fa-solid"),t.classList.add("fa-plus"),t.addEventListener("click",(()=>{Ie(),function(){const t=document.createElement("form");t.setAttribute("id","task-form");const e=document.createElement("label");e.innerHTML="Name:",t.appendChild(e);const r=document.createElement("input");r.setAttribute("id","task-name-field"),t.appendChild(r);const n=document.createElement("label");n.innerHTML="Due Date:",t.appendChild(n);const a=document.createElement("input");if(a.setAttribute("type","date"),a.setAttribute("id","date-input-field"),a.value=yt(new Date,"yyyy-MM-d"),document.querySelector(".active")===document.getElementById("weekly-container")){const t=yt(vt(new Date,1),"yyyy-MM-d");a.max=t,a.min=a.value}else document.querySelector(".active")===document.getElementById("today-container")&&(a.max=a.value,a.min=a.value);t.appendChild(a);const i=document.createElement("label");i.innerHTML="Description:",t.appendChild(i);const o=document.createElement("textarea");o.style.resize="none",o.setAttribute("id","description-input-field"),t.appendChild(o);const c=document.createElement("label");c.innerHTML="Priority:",t.appendChild(c);const d=document.createElement("div"),s=document.createElement("button");s.setAttribute("id","priority-box-form"),s.classList.add("priority-box"),s.value="low",s.addEventListener("click",(t=>{t.preventDefault(),We(s)}));const u=document.createElement("span");u.setAttribute("id","priority-text"),u.innerHTML="Low",d.appendChild(s),d.appendChild(u),t.appendChild(d),Pe.appendChild(t);const l=document.createElement("div");l.setAttribute("id","task-form-button-container");const m=document.createElement("button");m.setAttribute("id","task-cancel-button"),m.innerHTML="Cancel",m.addEventListener("click",(e=>{e.preventDefault(),t.remove(),qe()})),l.appendChild(m);const A=document.createElement("button");A.setAttribute("id","task-add-button"),A.innerHTML="Add",A.addEventListener("click",(e=>{e.preventDefault(),function(){const t=document.getElementById("task-name-field").value,e=pe(document.getElementById("date-input-field").value,"yyyy-MM-d",new Date);!function(t,e,r,n,a){ge.push(new be(t,e,r,n,a))}(t,document.getElementById("description-input-field").value,e,document.getElementById("priority-box-form").value,document.querySelector(".active").value)}(),t.remove(),qe(),Ne(),He()})),l.appendChild(A),t.appendChild(l)}()})),Pe.appendChild(t)}(),document.getElementById("task-list")&&document.getElementById("task-list").remove(),0!==ge.length){const t=document.createElement("div");t.setAttribute("id","task-list"),Pe.prepend(t),document.querySelectorAll(".active").forEach((t=>{if(t===document.getElementById("today-container"))!function(){for(let t=0;t<ge.length;t++)yt(ge[t].dueDate,"MM/dd/yyyy")===yt(new Date,"MM/dd/yyyy")&&Oe(t)}();else if(t===document.getElementById("weekly-container"))!function(){for(let t=0;t<ge.length;t++){const e=vt(new Date,1),r=Et(ge[t].dueDate,e);-1!==r&&0!==r||Oe(t)}}();else if(t===document.getElementById("inbox-container"))for(let t=0;t<ge.length;t++)Oe(t);else!function(){const t=document.querySelector(".active").value;for(let e=0;e<ge.length;e++)ge[e].project===t&&Oe(e)}()}))}}function Ie(){document.getElementById("add-task-btn").style.display="none"}function qe(){document.getElementById("add-task-btn").style.display=""}function We(t){const e=document.getElementById("priority-text");"low"===t.value?(t.style.background="yellow",t.value="med",t===document.getElementById("priority-box-form")&&(e.innerHTML="Med")):"med"===t.value?(t.style.background="red",t.value="high",t===document.getElementById("priority-box-form")&&(e.innerHTML="High")):"high"===t.value&&(t.style.background="green",t.value="low",t===document.getElementById("priority-box-form")&&(e.innerHTML="Low"))}function Oe(t){const e=document.getElementById("task-list"),r=document.createElement("div");r.classList.add("task-item"),r.setAttribute("id",`task-item-${t}`);const n=document.createElement("span");n.classList.add("fa-regular"),ge[t].isCompleted?n.classList.add("fa-circle-check"):n.classList.add("fa-circle"),n.setAttribute("id",`completion-circle-${t}`),n.addEventListener("click",(()=>{!function(t){const e=document.getElementById(`completion-circle-${t}`);ge[t].isCompleted?ge[t].isCompleted&&(e.classList.remove("fa-circle-check"),e.classList.add("fa-circle"),ge[t].isCompleted=!1):(e.classList.remove("fa-circle"),e.classList.add("fa-circle-check"),ge[t].isCompleted=!0)}(t)})),r.appendChild(n);const a=document.createElement("p");a.innerHTML=ge[t].name,r.appendChild(a);const i=document.createElement("p");i.innerHTML=`Due Date: ${yt(ge[t].dueDate,"MM/dd/yyyy")}`,r.appendChild(i);const o=document.createElement("div"),c=document.createElement("p");c.innerHTML="Priority: ";const d=document.createElement("button");d.value=ge[t].priority,d.setAttribute("id",`priority-box-${t}`),d.classList.add("priority-box"),"low"===ge[t].priority?d.style.background="green":"med"===ge[t].priority?d.style.background="yellow":"high"===ge[t].priority&&(d.style.background="red"),o.appendChild(c),o.appendChild(d),r.appendChild(o);const s=document.createElement("div");s.setAttribute("id","task-edit-container");const u=document.createElement("span");u.classList.add("fa-regular"),u.classList.add("fa-pen-to-square"),u.addEventListener("click",(()=>{Ie(),function(t){const e=document.createElement("div");e.setAttribute("id","task-view-window");const r=document.getElementById(`task-item-${t}`),n=document.getElementById("task-list"),a=document.createElement("label");a.innerHTML="Name:",e.appendChild(a);const i=document.createElement("input");i.setAttribute("id","task-name-field"),i.value=ge[t].name,i.disabled=!0,e.appendChild(i);const o=document.createElement("label");o.innerHTML="Due Date:",e.appendChild(o);const c=document.createElement("input");if(c.setAttribute("type","date"),c.setAttribute("id","date-input-field"),c.value=yt(ge[t].dueDate,"yyyy-MM-d"),c.disabled=!0,document.querySelector(".active")===document.getElementById("weekly-container")){const t=yt(vt(new Date,1),"yyyy-MM-d");c.max=t,c.min=c.value}else document.querySelector(".active")===document.getElementById("today-container")&&(c.max=c.value,c.min=c.value);e.appendChild(c);const d=document.createElement("label");d.innerHTML="Description:",e.appendChild(d);const s=document.createElement("textarea");s.style.resize="none",s.value=ge[t].description,s.setAttribute("id","description-input-field"),s.disabled=!0,e.appendChild(s);const u=document.createElement("label");u.innerHTML="Priority:",e.appendChild(u);const l=document.createElement("div"),m=document.createElement("button");m.setAttribute("id","priority-box-form"),m.classList.add("priority-box"),m.value=ge[t].priority,m.disabled=!0;const A=document.createElement("span");A.setAttribute("id","priority-text"),"low"===ge[t].priority?(m.style.background="green",A.innerHTML="Low"):"med"===ge[t].priority?(A.innerHTML="Med",m.style.background="yellow"):"high"===ge[t].priority&&(m.style.background="red",A.innerHTML="High"),m.addEventListener("click",(t=>{t.preventDefault(),We(m)})),l.appendChild(m),l.appendChild(A),e.appendChild(l),n.replaceChild(e,r);const p=document.createElement("div");p.setAttribute("id","view-form-button-container");const f=document.createElement("button");f.setAttribute("id","task-close-button"),f.innerHTML="Close",f.addEventListener("click",(t=>{t.preventDefault(),He(),qe()})),p.appendChild(f);const h=document.createElement("button");h.setAttribute("id","edit-button"),h.innerHTML="Edit",h.addEventListener("click",(t=>{i.disabled=!1,s.disabled=!1,c.disabled=!1,m.disabled=!1,g.style.display="",h.style.display="none"})),p.appendChild(h);const g=document.createElement("button");g.setAttribute("id","save-button"),g.innerHTML="Save",g.addEventListener("click",(()=>{i.disabled=!0,s.disabled=!0,c.disabled=!0,m.disabled=!0,ge[t].name=i.value,ge[t].dueDate=pe(c.value,"yyyy-MM-d",new Date),ge[t].description=s.value,ge[t].priority=m.value,Ne(),He()})),g.style.display="none",p.appendChild(g),e.appendChild(p)}(t)}));const l=document.createElement("span");l.classList.add("fa-regular"),l.classList.add("fa-trash-can"),l.addEventListener("click",(()=>{!function(t){(function(t){ge.splice(t,1)})(t),Ne(),He()}(t)})),s.appendChild(u),s.appendChild(l),r.appendChild(s),e.appendChild(r)}let Re=[];function ze(){document.createElement("div").setAttribute("id","new-project-container"),document.getElementById("add-new-project-container").style.display="none";const t=document.createElement("p");t.classList.add("title"),t.setAttribute("id","new-project-title"),t.textContent="Create New Project";const e=document.createElement("form");e.setAttribute("id","new-project-form");const r=document.createElement("input");r.setAttribute("id","project-name-input"),r.setAttribute("maxlength","25"),r.setAttribute("placeholder","Enter a project name");const n=document.createElement("div");n.setAttribute("id","form-btn-container");const a=document.createElement("button");a.classList.add("button"),a.setAttribute("id","new-project-submit-btn"),a.textContent="Add",a.addEventListener("click",(t=>{t.preventDefault(),function(){const t=document.getElementById("project-name-input");Re.includes(t.value)?alert("Cannot have duplicate project names"):(Re.push(t.value),Qe(),Ne(),Fe())}()}));const i=document.createElement("button");i.setAttribute("id","new-project-cancel-button"),i.classList.add("button"),i.innerHTML="Cancel",i.addEventListener("click",(t=>{t.preventDefault(),Qe()})),e.append(r),n.append(i),n.append(a),e.append(n),document.getElementById("add-projects-title").after(e)}function Qe(){const t=document.getElementById("projects"),e=document.getElementById("new-project-form");t.removeChild(e),document.getElementById("add-new-project-container").style.display=""}function Fe(){const t=document.getElementById("projects-container");t&&t.remove();const e=document.getElementById("projects"),r=document.createElement("div");r.setAttribute("id","projects-container"),e.appendChild(r);for(let t=0;t<Re.length;t++){const e=document.createElement("div");e.classList.add("project");const n=document.createElement("span");n.classList.add("fa-solid"),n.classList.add("fa-list-check"),e.appendChild(n),e.value=Re[t];const a=document.createElement("div");a.classList.add("project-name"),a.setAttribute("id",`project-[${t}]`),a.innerHTML=`${Re[t]}`,a.addEventListener("click",(()=>{Xe(),e.classList.add("active"),Ge(),He()})),e.appendChild(a);const i=document.createElement("span");i.classList.add("project-delete"),i.classList.add("fa-regular"),i.classList.add("fa-circle-xmark"),i.addEventListener("click",(()=>Ze(t))),e.appendChild(i),r.append(e)}}function Ze(t){Re.splice(t,1),document.getElementById(`project-[${t}]`).remove(),Ne(),Fe()}function Xe(){document.querySelectorAll(".active").forEach((t=>{t.classList.remove("active")}))}function Ge(){const t=document.getElementById("task-form");t&&(t.remove(),qe())}!function(){Se();const t=document.getElementById("inbox-button");Fe(),t.addEventListener("click",(()=>{Xe(),document.getElementById("inbox-container").classList.add("active"),Ge(),He()})),document.getElementById("today-button").addEventListener("click",(()=>{Xe(),document.getElementById("today-container").classList.add("active"),Ge(),He()})),document.getElementById("weekly-button").addEventListener("click",(()=>{Xe(),document.getElementById("weekly-container").classList.add("active"),Ge(),He()})),document.getElementById("add-new-project-container").addEventListener("click",ze)}(),He()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,